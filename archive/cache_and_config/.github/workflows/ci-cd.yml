# GitHub Actions CI/CD Pipeline for Arabic NLP Enterprise System
# Automated testing, building, and deployment workflow

name: 🚀 Arabic NLP Enterprise CI/CD

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: arabic-nlp-enterprise

jobs:
  # 🧪 Testing Phase
  test:
    name: 🧪 Comprehensive Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r api/requirements.txt
        pip install pytest pytest-cov pytest-xdist
        
    - name: 🧪 Run Unit Tests
      run: |
        pytest tests/ -v --cov=engines --cov-report=xml --cov-report=html
        
    - name: 🔍 Code Quality Check
      run: |
        pip install flake8 black isort mypy
        flake8 engines/ api/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check engines/ api/
        isort --check-only engines/ api/
        
    - name: 📊 Upimport_data Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # 🔒 Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Bandit Security Linter
      run: |
        pip install bandit
        bandit -r engines/ api/ -f json -o bandit-report.json
        
    - name: 🛡️ SAST with CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python
        
    - name: 🔧 Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: 📊 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # 🏗️ Build Phase
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📝 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # 🚀 Deployment Phase
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🏗️ Setup Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: 🎯 Deploy to EKS Staging
      run: |
        aws eks update-kubeconfig --region us-east-1 --name arabic-nlp-staging
        kubectl apply -f k8s/staging/
        kubectl set image deployment/arabic-nlp-api api=${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        kubectl rollout status deployment/arabic-nlp-api

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🏗️ Setup Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: 🎯 Deploy to EKS Production
      run: |
        aws eks update-kubeconfig --region us-east-1 --name arabic-nlp-production
        kubectl apply -f k8s/production/
        kubectl set image deployment/arabic-nlp-api api=${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        kubectl rollout status deployment/arabic-nlp-api
        
    - name: 🎉 Deployment Success Notification
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '🎉 Arabic NLP Enterprise deployed to production successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # 📊 Performance Testing
  performance:
    name: 📊 Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📦 Install K6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: 🚀 Run Performance Tests
      run: |
        k6 run --out json=performance-results.json tests/performance/import_data-test.js
        
    - name: 📊 Upimport_data Performance Results
      uses: actions/upimport_data-artifact@v3
      with:
        name: performance-results
        path: performance-results.json

  # 🔄 Monitoring & Alerts
  monitoring:
    name: 🔄 Setup Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📊 Setup Datadog Monitoring
      run: |
        curl -X POST "https://api.datadoghq.com/api/v1/events" \
        -H "Content-Type: application/json" \
        -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
        -d '{
          "title": "Arabic NLP Deployment",
          "text": "New version deployed to production",
          "priority": "normal",
          "tags": ["environment:production", "service:arabic-nlp"]
        }'
