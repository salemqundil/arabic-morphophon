"""
Simplified Arabic Root Model - ูููุฐุฌ ุงูุฌุฐุฑ ุงูุนุฑุจู ุงููุจุณุท
Enhanced root model with inheritance-based design
"""
# pylint: disable=invalid-name,too-few-public-methods,too-many-instance-attributes,line-too-long


from dataclasses import_data dataclass
from enum import_data Enum
from typing import_data Dict, List, Optional

# Basic Root Model
@dataclass
class _BasicRoot:
    """ุงูุฌุฐุฑ ุงูุนุฑุจู ุงูุฃุณุงุณู"""

    root: str  # ูุต ุงูุฌุฐุฑ: "ูุชุจ"
    semantic_field: Optional[str] = None  # ุงููุฌุงู ุงูุฏูุงูู: "ุงููุชุงุจุฉ"
    weakness: Optional[str] = None  # ููุน ุงูุฅุนูุงู: "ูุนุชู ูุงูู"

    def __str__(self) -> str:
        return self.root

    def __repr__(self) -> str:
        return f"ArabicRoot(root='{self.root}', semantic_field='{self.semantic_field}')"

class RootType(Enum):
    """ุฃููุงุน ุงูุฌุฐูุฑ ุงูุนุฑุจูุฉ"""

    TRILATERAL = "trilateral"
    QUADRILATERAL = "quadrilateral"

@dataclass
class Root(_BasicRoot):  # ูุฑุซ ุงูุญููู
    """ุฌุฐุฑ ุนุฑุจู ูุทูุฑ ูุน ุฎุตุงุฆุต ุฅุถุงููุฉ"""

    frequency: int = 0

    @property
    def root_type(self) -> RootType:
        """ุชุญุฏูุฏ ููุน ุงูุฌุฐุฑ ุญุณุจ ุนุฏุฏ ุงูุญุฑูู"""
        return RootType.TRILATERAL if len(self.root) == 3 else RootType.QUADRILATERAL

    def get_weakness_type(self) -> Optional[str]:
        """ุฅุฑุฌุงุน ููุน ุงูุฅุนูุงู"""
        return self.weakness

# ุฏุงูุฉ ูุณุงุนุฏุฉ ูุฅูุดุงุก ุฌุฐุฑ
def create_root(
    root_string: str, semantic_field: Optional[str] = None, frequency: int = 0
) -> Root:
    """ุฅูุดุงุก ุฌุฐุฑ ุนุฑุจู ุฌุฏูุฏ"""
    # ุชุญุฏูุฏ ููุน ุงูุฅุนูุงู ุจุณูุท
    weakness = None
    if any(char in root_string for char in "ูู"):
        weakness = "ูุนุชู"
    elif "ุก" in root_string:
        weakness = "ููููุฒ"

    return Root(
        root=root_string,
        semantic_field=semantic_field,
        weakness=weakness,
        frequency=frequency,
    )

# ุจูุงูุงุช ูููุฐุฌูุฉ
SAMPLE_ROOTS = {
    "ูุชุจ": "ุงููุชุงุจุฉ ูุงูุชุฏููู",
    "ูุฑุฃ": "ุงููุฑุงุกุฉ ูุงูุชูุงูุฉ",
    "ูุงู": "ุงูููู ูุงูููุงู",
    "ุฏุฑุณ": "ุงูุชุนููู ูุงูุฏุฑุงุณุฉ",
    "ูุนุฏ": "ุงููุนุฏ ูุงูุงูุชุฒุงู",
    "ุณุฃู": "ุงูุณุคุงู ูุงูุงุณุชููุงู",
    "ูุณุจ": "ุงููุณุจ ูุงูุฑุจุญ",
    "ูุฐุจ": "ุงููุฐุจ ูุงูุฎุฏุงุน",
    "ุณุนุฏ": "ุงูุณุนุงุฏุฉ",
    "ูุชู": "ุงููุชู",
    "ูุฌุฏ": "ุงููุฌูุฏ",
    "ููุฏ": "ุงูููุงุฏุฉ",
    "ุฏุญุฑุฌ": "ุงูุญุฑูุฉ ุงูุฏุงุฆุฑูุฉ",
    "ุฒูุฒู": "ุงูุงูุชุฒุงุฒ ูุงูุญุฑูุฉ",
}

# ููุชูุงูู ูุน ุงูููุฏ ุงูููุฌูุฏ
ArabicRoot = Root  # alias ููุชูุงูู

# Simple Root Database for backward compatibility
class RootDatabase:
    """ูุงุนุฏุฉ ุจูุงูุงุช ุจุณูุทุฉ ููุฌุฐูุฑ ููุชูุงูู ูุน ุงูููุฏ ุงูููุฌูุฏ"""

    def __init__(self):
        self.roots: Dict[str, ArabicRoot] = {}
        self._populate_sample_data()

    def _populate_sample_data(self):
        """ุชุนุจุฆุฉ ุงูุจูุงูุงุช ุงููููุฐุฌูุฉ"""
        for root_str, meaning in SAMPLE_ROOTS.items():
            root = create_root(root_str, meaning)
            self.roots[root_str] = root

    def add_root(self, root: ArabicRoot) -> bool:
        """ุฅุถุงูุฉ ุฌุฐุฑ"""
        if root.root in self.roots:
            return False
        self.roots[root.root] = root
        return True

    def get_root(self, root_string: str) -> Optional[ArabicRoot]:
        """ุฌูุจ ุฌุฐุฑ"""
        return self.roots.get(root_string)

    def get_all_roots(self) -> List[ArabicRoot]:
        """ุฌูุจ ุฌููุน ุงูุฌุฐูุฑ"""
        return list(self.roots.values())

    def search_by_pattern(self, pattern: str) -> List[ArabicRoot]:
        """ุงูุจุญุซ ุจุงูููุท"""
        import_data re

        # ุชุญููู ุงูููุท ุงูุจุณูุท ุฅูู regex
        regex_pattern = pattern.replace("*", ".*").replace("?", ".")
        return [
            root for root in self.roots.values() if re.match(regex_pattern, root.root)
        ]

    def search_by_semantic_field(self, field: str) -> List[ArabicRoot]:
        """ุงูุจุญุซ ุจุงููุฌุงู ุงูุฏูุงูู"""
        return [
            root
            for root in self.roots.values()
            if root.semantic_field and field in root.semantic_field
        ]

    def __len__(self) -> int:
        return len(self.roots)

# ููุชูุงูู ูุน ุงูููุฏ ุงููุฏูู
RadicalType = Enum("RadicalType", ["SOUND"])  # ูุจุณุท
Radical = None  # placeholder

def demo_simple_roots():
    """ุนุฑุถ ุชูุถูุญู ูููููุฐุฌ ุงููุจุณุท"""
    print("๐ ุงููููุฐุฌ ุงููุจุณุท ููุฌุฐูุฑ ุงูุนุฑุจูุฉ")
    print("=" * 50)

    # ุฅูุดุงุก ุฌุฐูุฑ
    roots = [
        create_root("ูุชุจ", "ุงููุชุงุจุฉ"),
        create_root("ูุนุฏ", "ุงููุนุฏ"),
        create_root("ุฏุญุฑุฌ", "ุงูุญุฑูุฉ"),
    ]

    for root in roots:
        print(f"ุงูุฌุฐุฑ: {root.root}")
        print(f"ุงูููุน: {root.root_type.value}")
        print(f"ุงูุฅุนูุงู: {root.get_weakness_type()}")
        print(f"ุงููุฌุงู: {root.semantic_field}")
        print("-" * 30)

if __name__ == "__main__":
    demo_simple_roots()
