#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
๐งฑ ูุญูู ุงููููููุงุช ูุงูุญุฑูุงุช - ูุงุนุฏุฉ ุจูุงูุงุช ุงูููุงุนู ุงูุตุฑูู,
    Phonemes and Harakat Analyzer - Morphological Reactor Database Core
"""
# pylint: disable=broad-except,unused-variable,too-many-arguments
# pylint: disable=too-few-public-methods,invalid-name,unused-argument
# flake8: noqa: E501,F401,F821,A001,F403
# mypy: disable-error-code=no-untyped def,misc
    import json  # noqa: F401
    import logging  # noqa: F401
    from typing import Dict, List, Optional, Any
    from dataclasses import dataclass  # noqa: F401

# Setup logging,
    logger = logging.getLogger(__name__)


@dataclass,
    class Phoneme:
    """๐ค ููุงุณ ุงูููููู (ุงููุญุฏุฉ ุงูุตูุชูุฉ ุงูุฃุณุงุณูุฉ)"""

    letter: str,
    type: str  # ุตุงูุชุ ุตุงุฆุชุ ุตุงุฆุช ุทููู,
    articulation_point: str  # ูุฎุฑุฌ,
    hardness: str  # ุตูุงุจุฉ,
    function: str  # ูุธููุฉ ุตุฑููุฉ,
    morphological_weight: float = 0.0,
    frequency_score: float = 0.0


@dataclass,
    class Haraka:
    """๐ข ููุงุณ ุงูุญุฑูุฉ"""

    symbol: str,
    name: str,
    type: str  # ููุน ุงูุญุฑูุฉ,
    clarity: str  # ูุถูุญ,
    role: str  # ุฏูุฑ ุตุฑูู,
    phonetic_weight: float = 0.0,
    grammatical_significance: float = 0.0,
    class PhonemesHarakatAnalyzer:
    """๐งฑ ูุญูู ุงููููููุงุช ูุงูุญุฑูุงุช - ููุงุฉ ุงูููุงุนู ุงูุตุฑูู"""

    def __init__(self):  # type: ignore[no-untyped def]
        """TODO: Add docstring."""
        self.phonemes = self._initialize_phonemes()
        self.harakat = self._initialize_harakat()
        self.phoneme_combinations = self._initialize_combinations()
        self.morphological_rules = self._initialize_morphological_rules()

    def _initialize_phonemes(self) -> List[Phoneme]:
        """๐ค ุชููุฆุฉ ูุงุนุฏุฉ ุจูุงูุงุช ุงููููููุงุช"""
        phonemes_data = [
            {
                "letter": "ุจ",
                "type": "ุตุงูุช",
                "articulation_point": "ุดููู",
                "hardness": "ุตูุจ",
                "function": "ูุจูู ููุฌุฐุฑ",
                "morphological_weight": 0.85,
                "frequency_score": 0.78,
            },
            {
                "letter": "ุช",
                "type": "ุตุงูุช",
                "articulation_point": "ุทุฑู ุงููุณุงู",
                "hardness": "ุตูุจ",
                "function": "ูุจูู ููุฌุฐุฑ",
                "morphological_weight": 0.88,
                "frequency_score": 0.82,
            },
            {
                "letter": "ู",
                "type": "ุตุงูุช",
                "articulation_point": "ูููู",
                "hardness": "ุตูุจ",
                "function": "ูุจูู ููุฌุฐุฑ",
                "morphological_weight": 0.90,
                "frequency_score": 0.95,
            },
            {
                "letter": "ุฏ",
                "type": "ุตุงูุช",
                "articulation_point": "ุทุฑู ุงููุณุงู",
                "hardness": "ุตูุจ",
                "function": "ูุจูู ููุฌุฐุฑ",
                "morphological_weight": 0.83,
                "frequency_score": 0.75,
            },
            {
                "letter": "ุณ",
                "type": "ุตุงูุช",
                "articulation_point": "ุฃุณูุงู",
                "hardness": "ุตูุจ ูุชูุณุท",
                "function": "ูุจูู ููุฌุฐุฑ",
                "morphological_weight": 0.80,
                "frequency_score": 0.72,
            },
            {
                "letter": "ุฃ",
                "type": "ุตุงุฆุช",
                "articulation_point": "ุญููู",
                "hardness": "ููู",
                "function": "ูุญูุฒ ุตุฑูู",
                "morphological_weight": 0.95,
                "frequency_score": 0.90,
            },
            {
                "letter": "ุง",
                "type": "ุตุงุฆุช ุทููู",
                "articulation_point": "ููู",
                "hardness": "ููู",
                "function": "ูุฏ ุตูุชู",
                "morphological_weight": 0.92,
                "frequency_score": 0.98,
            },
            {
                "letter": "ู",
                "type": "ุตุงุฆุช ุทููู",
                "articulation_point": "ุดููู",
                "hardness": "ููู",
                "function": "ูุฏ ูุฑุจุท",
                "morphological_weight": 0.88,
                "frequency_score": 0.85,
            },
            {
                "letter": "ู",
                "type": "ุตุงุฆุช ุทููู",
                "articulation_point": "ูุณุท ุงููุณุงู",
                "hardness": "ููู",
                "function": "ูุฏ ูุฑุจุท",
                "morphological_weight": 0.87,
                "frequency_score": 0.88,
            },
            {
                "letter": "ู",
                "type": "ุตุงูุช",
                "articulation_point": "ุฎูุดูู",
                "hardness": "ูุฎูู",
                "function": "ุฒูุงุฏุฉ ุตุฑููุฉ",
                "morphological_weight": 0.75,
                "frequency_score": 0.80,
            },
            {
                "letter": "ู",
                "type": "ุตุงูุช",
                "articulation_point": "ุดููู",
                "hardness": "ูุฎูู",
                "function": "ุฒูุงุฏุฉ ุตุฑููุฉ",
                "morphological_weight": 0.78,
                "frequency_score": 0.83,
            },
            {
                "letter": "ู",
                "type": "ุตุงูุช",
                "articulation_point": "ุทุฑู ุงููุณุงู",
                "hardness": "ูุงุฆุน",
                "function": "ุฑุจุท ูุชุนุฑูู",
                "morphological_weight": 0.70,
                "frequency_score": 0.95,
            },
            {
                "letter": "ุฑ",
                "type": "ุตุงูุช",
                "articulation_point": "ุทุฑู ุงููุณุงู",
                "hardness": "ููุฑุฑ",
                "function": "ูุจูู ููุฌุฐุฑ",
                "morphological_weight": 0.82,
                "frequency_score": 0.85,
            },
            {
                "letter": "ุน",
                "type": "ุตุงูุช",
                "articulation_point": "ุญููู",
                "hardness": "ุงุญุชูุงูู",
                "function": "ูุจูู ููุฌุฐุฑ",
                "morphological_weight": 0.85,
                "frequency_score": 0.70,
            },
            {
                "letter": "ู",
                "type": "ุตุงูุช",
                "articulation_point": "ุดููู ุฃุณูุงูู",
                "hardness": "ุงุญุชูุงูู",
                "function": "ูุจูู ููุฌุฐุฑ",
                "morphological_weight": 0.83,
                "frequency_score": 0.77,
            },
        ]

        phonemes = []
        for p in phonemes_data:
            phoneme = Phoneme()
                letter=p["letter"],
                type=p["type"],
                articulation_point=p["articulation_point"],
                hardness=p["hardness"],
                function=p["function"],
                morphological_weight=p["morphological_weight"],
                frequency_score=p["frequency_score"])
            phonemes.append(phoneme)

        return phonemes,
    def _initialize_harakat(self) -> List[Haraka]:
        """๐ข ุชููุฆุฉ ูุงุนุฏุฉ ุจูุงูุงุช ุงูุญุฑูุงุช"""
        harakat_data = [
            {
                "symbol": "ู",
                "name": "ูุชุญุฉ",
                "type": "ูุตู ููููู",
                "clarity": "ูุชูุณุท",
                "role": "ุชุญุฑูู ุงูุฌุฐุฑ",
                "phonetic_weight": 0.80,
                "grammatical_significance": 0.75,
            },
            {
                "symbol": "ู",
                "name": "ูุณุฑุฉ",
                "type": "ูุตู ููููู",
                "clarity": "ุญุงุฏ",
                "role": "ุฏูุงูุฉ ุนูู ุงููุตุฏุฑ/ุงูุงุณู",
                "phonetic_weight": 0.85,
                "grammatical_significance": 0.90,
            },
            {
                "symbol": "ู",
                "name": "ุถูุฉ",
                "type": "ูุตู ููููู",
                "clarity": "ุบููุธ",
                "role": "ุนูุงูุฉ ูููุงุนู ุฃู ุงููุถุงุฑุน",
                "phonetic_weight": 0.82,
                "grammatical_significance": 0.88,
            },
            {
                "symbol": "ู",
                "name": "ุณููู",
                "type": "ุณุงูุจ ุญุฑูุฉ",
                "clarity": "ุงูุบูุงู",
                "role": "ููู ูุชุซุจูุช",
                "phonetic_weight": 0.60,
                "grammatical_significance": 0.70,
            },
            {
                "symbol": "ู",
                "name": "ุดุฏุฉ",
                "type": "ุชุถุงุนู",
                "clarity": "ูุถุงุนู",
                "role": "ุชูููุฉ ูุชูุฑุงุฑ",
                "phonetic_weight": 0.95,
                "grammatical_significance": 0.85,
            },
            {
                "symbol": "ู",
                "name": "ุชูููู ูุชุญ",
                "type": "ุชูููู",
                "clarity": "ุฎููู",
                "role": "ููุฑุฉ ููุตูุจุฉ",
                "phonetic_weight": 0.65,
                "grammatical_significance": 0.92,
            },
            {
                "symbol": "ู",
                "name": "ุชูููู ูุณุฑ",
                "type": "ุชูููู",
                "clarity": "ุฎููู",
                "role": "ููุฑุฉ ูุฌุฑูุฑุฉ",
                "phonetic_weight": 0.65,
                "grammatical_significance": 0.92,
            },
            {
                "symbol": "ู",
                "name": "ุชูููู ุถู",
                "type": "ุชูููู",
                "clarity": "ุฎููู",
                "role": "ููุฑุฉ ูุฑููุนุฉ",
                "phonetic_weight": 0.65,
                "grammatical_significance": 0.92,
            },
        ]

        harakat = []
        for h in harakat_data:
            haraka = Haraka()
                symbol=h["symbol"],
                name=h["name"],
                type=h["type"],
                clarity=h["clarity"],
                role=h["role"],
                phonetic_weight=h["phonetic_weight"],
                grammatical_significance=h["grammatical_significance"])
            harakat.append(haraka)

        return harakat,
    def _initialize_combinations(self) -> Dict[str, Dict]:
        """๐ ุชููุฆุฉ ุชุฑููุจุงุช ุงููููููุงุช ูุงูุญุฑูุงุช"""
        return {
            "consonant_vowel": {
                "CV": {"weight": 1.0, "type": "ููุทุน ุฎููู", "frequency": 0.95},
                "CVC": {"weight": 2.0, "type": "ููุทุน ุซููู", "frequency": 0.85},
                "CVV": {"weight": 2.0, "type": "ููุทุน ุทููู", "frequency": 0.75},
                "CVVC": {"weight": 3.0, "type": "ููุทุน ูุงุฆู", "frequency": 0.45},
            },
            "morphological_templates": {
                "ูุนู": {
                    "pattern": "CaCaC",
                    "phonemes": ["C", "a", "C", "a", "C"],
                    "weight": 0.95,
                },
                "ูุงุนู": {
                    "pattern": "CaaCiC",
                    "phonemes": ["C", "aa", "C", "i", "C"],
                    "weight": 0.88,
                },
                "ููุนูู": {
                    "pattern": "mafCuuC",
                    "phonemes": ["m", "a", "C", "uu", "C"],
                    "weight": 0.82,
                },
                "ุงุณุชูุนู": {
                    "pattern": "istafCaC",
                    "phonemes": ["i", "s", "t", "a", "C", "a", "C"],
                    "weight": 0.65,
                },
            },
        }

    def _initialize_morphological_rules(self) -> Dict[str, Any]:
        """๐ ุชููุฆุฉ ุงูููุงุนุฏ ุงูุตุฑููุฉ ูููููููุงุช ูุงูุญุฑูุงุช"""
        return {
            "assimilation_rules": {
                "sun_letters": [
                    "ุช",
                    "ุซ",
                    "ุฏ",
                    "ุฐ",
                    "ุฑ",
                    "ุฒ",
                    "ุณ",
                    "ุด",
                    "ุต",
                    "ุถ",
                    "ุท",
                    "ุธ",
                    "ู",
                    "ู",
                ],
                "moon_letters": [
                    "ุฃ",
                    "ุจ",
                    "ุฌ",
                    "ุญ",
                    "ุฎ",
                    "ุน",
                    "ุบ",
                    "ู",
                    "ู",
                    "ู",
                    "ู",
                    "ู",
                    "ู",
                    "ู",
                ],
            },
            "vowel_harmony": {
                "front_vowels": ["ู", "ู"],
                "back_vowels": ["ู", "ู"],
                "central_vowels": ["ู", "ุง"],
            },
            "syllable_rules": {
                "initial_clusters": ["bl", "br", "dr", "kr"],
                "final_clusters": ["nt", "nd", "st", "kt"],
                "forbidden_sequences": ["aa", "ii", "uu"],
            },
        }

    def analyze_phonetic_structure(self, word: str) -> Dict[str, Any]:
        """๐ ุชุญููู ุงูุจููุฉ ุงูุตูุชูุฉ ูููููุฉ"""
        try:
            phonetic_analysis = {
                "word": word,
                "phonemes": [],
                "harakat": [],
                "syllable_structure": [],
                "phonetic_weight": 0.0,
                "morphological_complexity": 0.0,
                "assimilation_effects": [],
            }

            # ุชุญููู ูู ุญุฑู ูู ุงููููุฉ,
    for i, char in enumerate(word):
                # ุงูุจุญุซ ุนู ุงูููููู,
    phoneme = self.find_phoneme(char)
                if phoneme:
                    phonetic_analysis["phonemes"].append()
                        {
                            "position": i,
                            "letter": char,
                            "type": phoneme.type,
                            "articulation_point": phoneme.articulation_point,
                            "function": phoneme.function,
                            "weight": phoneme.morphological_weight,
                        }
                    )
                    phonetic_analysis["phonetic_weight"] += phoneme.morphological_weight

                # ุงูุจุญุซ ุนู ุงูุญุฑูุฉ,
    haraka = self.find_haraka(char)
                if haraka:
                    phonetic_analysis["harakat"].append()
                        {
                            "position": i,
                            "symbol": char,
                            "name": haraka.name,
                            "role": haraka.role,
                            "grammatical_significance": haraka.grammatical_significance,
                        }
                    )

            # ุชุญููู ุงูุจููุฉ ุงูููุทุนูุฉ,
    phonetic_analysis["syllable_structure"] = self._extract_syllable_structure()
                word
            )

            # ุญุณุงุจ ุงูุชุนููุฏ ุงูุตุฑูู,
    phonetic_analysis["morphological_complexity"] = ()
                self._calculate_morphological_complexity()
                    phonetic_analysis["phonemes"], phonetic_analysis["harakat"]
                )
            )

            # ุชุญููู ุชุฃุซูุฑุงุช ุงูุฅุฏุบุงู,
    phonetic_analysis["assimilation_effects"] = self._analyze_assimilation(word)

            return {"status": "success", "analysis": phonetic_analysis}

        except Exception as e:
            logger.error(f"Error in phonetic analysis: {e}")
            return {"status": "error", "message": f"ุฎุทุฃ ูู ุงูุชุญููู ุงูุตูุชู: {str(e)}"}

    def find_phoneme(self, letter: str) -> Optional[Phoneme]:
        """๐ค ุงูุจุญุซ ุนู ููููู"""
        for phoneme in self.phonemes:
            if phoneme.letter == letter:
                return phoneme,
    return None,
    def find_haraka(self, symbol: str) -> Optional[Haraka]:
        """๐ข ุงูุจุญุซ ุนู ุญุฑูุฉ"""
        for haraka in self.harakat:
            if haraka.symbol == symbol:
                return haraka,
    return None,
    def _extract_syllable_structure(self, word: str) -> List[Dict]:
        """๐ ุงุณุชุฎุฑุงุฌ ุงูุจููุฉ ุงูููุทุนูุฉ"""
        syllables = []
        current_syllable = ""

        i = 0,
    while i < len(word):
            char = word[i]
            phoneme = self.find_phoneme(char)
            self.find_haraka(char)

            if phoneme:
                if phoneme.type in ["ุตุงูุช"]:
                    current_syllable += "C"
                elif phoneme.type in ["ุตุงุฆุช", "ุตุงุฆุช ุทููู"]:
                    current_syllable += "V" if phoneme.type == "ุตุงุฆุช" else "VV"

            # ุชุญุฏูุฏ ููุงูุฉ ุงูููุทุน,
    if i == len(word) - 1 or self._is_syllable_boundary(word, i):
                if current_syllable:
                    syllable_weight = self.phoneme_combinations.get()
                        "consonant_vowel", {}
                    ).get(current_syllable, {"weight": 1.0, "type": "ุบูุฑ ูุญุฏุฏ"})

                    syllables.append()
                        {
                            "pattern": current_syllable,
                            "type": syllable_weight["type"],
                            "weight": syllable_weight["weight"],
                            "position": len(syllables),
                        }
                    )
                    current_syllable = ""

            i += 1,
    return syllables,
    def _is_syllable_boundary(self, word: str, position: int) -> bool:
        """๐ ุชุญุฏูุฏ ุญุฏูุฏ ุงูููุงุทุน"""
        if position >= len(word) - 1:
            return True,
    current_char = word[position]
        next_char = word[position + 1]

        current_phoneme = self.find_phoneme(current_char)
        next_phoneme = self.find_phoneme(next_char)

        # ููุงุนุฏ ุจุณูุทุฉ ูุชุญุฏูุฏ ุญุฏูุฏ ุงูููุงุทุน,
    if current_phoneme and next_phoneme:
            if ()
                current_phoneme.type in ["ุตุงุฆุช", "ุตุงุฆุช ุทููู"]
                and next_phoneme.type == "ุตุงูุช"
            ):
                return True,
    return False,
    def _calculate_morphological_complexity()
        self, phonemes: List[Dict], harakat: List[Dict]
    ) -> float:
        """โ๏ธ ุญุณุงุจ ุงูุชุนููุฏ ุงูุตุฑูู"""
        complexity = 0.0

        # ุชุนููุฏ ุงููููููุงุช,
    for phoneme in phonemes:
            if phoneme["type"] == "ุตุงูุช":
                complexity += 0.5,
    elif phoneme["type"] in ["ุตุงุฆุช ุทููู"]:
                complexity += 0.3,
    else:
                complexity += 0.2

        # ุชุนููุฏ ุงูุญุฑูุงุช,
    for haraka in harakat:
            complexity += haraka["grammatical_significance"] * 0.2

        # ุชุทุจูุน ุงููุชูุฌุฉ,
    total_elements = len(phonemes) + len(harakat)
        return complexity / total_elements if total_elements > 0 else 0.0,
    def _analyze_assimilation(self, word: str) -> List[Dict]:
        """๐ ุชุญููู ุชุฃุซูุฑุงุช ุงูุฅุฏุบุงู"""
        assimilation_effects = []

        # ุชุญูู ูู ูุฌูุฏ ุฃู ุงูุชุนุฑูู,
    if word.startswith("ุงู"):
            third_letter = word[2] if len(word) > 2 else ""
            if ()
                third_letter,
    in self.morphological_rules["assimilation_rules"]["sun_letters"]
            ):
                assimilation_effects.append()
                    {
                        "type": "ุฅุฏุบุงู ุดูุณู",
                        "position": 1,
                        "effect": f"ุฅุฏุบุงู ุงููุงู ูู {third_letter}",
                        "phonetic_change": f"ุงู{third_letter}  > ุง{third_letter}ู",
                    }
                )

        # ุชุญูู ูู ุชุฃุซูุฑุงุช ุฃุฎุฑู,
    for i in range(len(word) - 1):
            current = word[i]
            next_char = word[i + 1]

            # ููุงุนุฏ ุงูุฅุฏุบุงู ุงูุจุณูุทุฉ,
    if current == next_char:
                assimilation_effects.append()
                    {
                        "type": "ุฅุฏุบุงู ุชูุงุซูู",
                        "position": i,
                        "effect": f"ุฅุฏุบุงู {current} ูู {next_char}}",
                        "phonetic_change": f"{current}{next_char}  > {current}ู",
                    }
                )

        return assimilation_effects,
    def get_phonemes_statistics(self) -> Dict[str, Any]:
        """๐ ุฅุญุตุงุฆูุงุช ุงููููููุงุช"""
        consonants = [p for p in self.phonemes if p.type == "ุตุงูุช"]
        vowels = [p for p in self.phonemes if "ุตุงุฆุช" in p.type]

        return {
            "total_phonemes": len(self.phonemes),
            "consonants_count": len(consonants),
            "vowels_count": len(vowels),
            "average_morphological_weight": sum()
                p.morphological_weight for p in self.phonemes
            )
            / len(self.phonemes),
            "average_frequency": sum(p.frequency_score for p in self.phonemes)
            / len(self.phonemes),
            "articulation_points": list()
                set(p.articulation_point for p in self.phonemes)
            ),
            "functions": list(set(p.function for p in self.phonemes)),
        }

    def get_harakat_statistics(self) -> Dict[str, Any]:
        """๐ ุฅุญุตุงุฆูุงุช ุงูุญุฑูุงุช"""
        return {
            "total_harakat": len(self.harakat),
            "average_phonetic_weight": sum(h.phonetic_weight for h in self.harakat)
            / len(self.harakat),
            "average_grammatical_significance": sum()
                h.grammatical_significance for h in self.harakat
            )
            / len(self.harakat),
            "harakat_types": list(set(h.type for h in self.harakat)),
            "grammatical_roles": list(set(h.role for h in self.harakat)),
        }

    def export_phonemes_dataframe(self):  # type: ignore[no-untyped def]
        """๐ ุชุตุฏูุฑ ุงููููููุงุช ูู DataFrame"""
        try:
            import pandas as pd  # noqa: F401,
    PANDAS_AVAILABLE = True,
    except ImportError:
            PANDAS_AVAILABLE = False,
    data = []
        for phoneme in self.phonemes:
            data.append()
                {
                    "ุงูุญุฑู": phoneme.letter,
                    "ุงูููุน": phoneme.type,
                    "ุงููุฎุฑุฌ": phoneme.articulation_point,
                    "ุงูุตูุงุจุฉ": phoneme.hardness,
                    "ุงููุธููุฉ": phoneme.function,
                    "ุงููุฒู_ุงูุตุฑูู": phoneme.morphological_weight,
                    "ููุงุท_ุงูุชูุฑุงุฑ": phoneme.frequency_score,
                }
            )

        if PANDAS_AVAILABLE:
            return pd.DataFrame(data)
        else:
            return {"error": "pandas ุบูุฑ ูุชููุฑ", "data": data}

    def export_harakat_dataframe(self):  # type: ignore[no-untyped def]
        """๐ ุชุตุฏูุฑ ุงูุญุฑูุงุช ูู DataFrame"""
        try:
            import pandas as pd  # noqa: F401,
    PANDAS_AVAILABLE = True,
    except ImportError:
            PANDAS_AVAILABLE = False,
    data = []
        for haraka in self.harakat:
            data.append()
                {
                    "ุงูุญุฑูุฉ": haraka.symbol,
                    "ุงูุงุณู": haraka.name,
                    "ุงูููุน": haraka.type,
                    "ุงููุถูุญ": haraka.clarity,
                    "ุงูุฏูุฑ": haraka.role,
                    "ุงููุฒู_ุงูุตูุชู": haraka.phonetic_weight,
                    "ุงูุฃูููุฉ_ุงููุญููุฉ": haraka.grammatical_significance,
                }
            )

        if PANDAS_AVAILABLE:
            return pd.DataFrame(data)
        else:
            return {"error": "pandas ุบูุฑ ูุชููุฑ", "data": data}

    # ุฅุถุงูุงุช ูุฏุนู ููุฒุงุช ุงูุฎุฏูุฉ,
    def get_detailed_features(self, word: str) -> Dict[str, Any]:
        """ุชูุงุตูู ููุฒุงุช ุงูุชุญููู ุงูุตูุชู ููููุฉ ูุงุญุฏุฉ"""
        result = self.analyze_phonetic_structure(word)
        return result.get('analysis', {})

    def get_batch_statistics(self, results: List[Dict[str, Any]]) -> Dict[str, Any]:
        """ุฅุญุตุงุฆูุงุช ูุฏูุนุฉ ูู ุงูุชุญูููุงุช"""
        total = len(results)
        phonetic_weights = []
        for r in results:
            if r.get('status') == 'success':
                analysis = r.get('analysis', {}).get('analysis', {})
                weight = analysis.get('phonetic_weight')
                if weight is not None:
                    phonetic_weights.append(weight)
        avg_weight = ()
            sum(phonetic_weights) / len(phonetic_weights) if phonetic_weights else 0.0
        )
        return {
            'average_phonetic_weight': avg_weight,
            'processed': len(phonetic_weights),
            'total_requested': total,
        }

    def compare_phonetic_structures()
        self, analyses: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """ููุงุฑูุฉ ุงูุจูู ุงูุตูุชูุฉ ููุงุฆูุฉ ูู ุงูุชุญูููุงุช"""
        comparisons = []
        for i in range(len(analyses)):
            for j in range(i + 1, len(analyses)):
                w1 = analyses[i].get('word')
                w2 = analyses[j].get('word')
                ph1 = ()
                    analyses[i]
                    .get('analysis', {})
                    .get('analysis', {})
                    .get('phonemes', [])
                )
                ph2 = ()
                    analyses[j]
                    .get('analysis', {})
                    .get('analysis', {})
                    .get('phonemes', [])
                )
                comparisons.append()
                    {
                        'word1': w1,
                        'word2': w2,
                        'phonemes_equal': ph1 == ph2,
                        'shared_phonemes': [p for p in ph1 if p in ph2],
                    }
                )
        return {'comparisons': comparisons}  # type: ignore
        # type ignore to satisfy declared return type


# ูุซุงู ุนูู ุงูุงุณุชุฎุฏุงู,
    def demo_phonemes_analyzer():  # type: ignore[no-untyped-def]
    """๐งช ุนุฑุถ ุชูุถูุญู ููุญูู ุงููููููุงุช ูุงูุญุฑูุงุช"""
    analyzer = PhonemesHarakatAnalyzer()

    print("๐งฑ ูุญูู ุงููููููุงุช ูุงูุญุฑูุงุช - ูุงุนุฏุฉ ุจูุงูุงุช ุงูููุงุนู ุงูุตุฑูู")
    print("=" * 60)

    # ุชุญููู ูููุฉ,
    result = analyzer.analyze_phonetic_structure("ูุชุงุจ")
    print("๐ ุชุญููู ูููุฉ 'ูุชุงุจ':")
    print(json.dumps(result, ensure_ascii=False, indent=2))

    # ุฅุญุตุงุฆูุงุช,
    phonemes_stats = analyzer.get_phonemes_statistics()
    harakat_stats = analyzer.get_harakat_statistics()

    print("\n๐ ุฅุญุตุงุฆูุงุช ุงููููููุงุช:")
    print(json.dumps(phonemes_stats, ensure_ascii=False, indent=2))

    print("\n๐ ุฅุญุตุงุฆูุงุช ุงูุญุฑูุงุช:")
    print(json.dumps(harakat_stats, ensure_ascii=False, indent=2))


if __name__ == "__main__":
    demo_phonemes_analyzer()

