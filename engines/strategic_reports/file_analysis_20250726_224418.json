{
  "timestamp": "2025-07-26T22:44:18.996457",
  "files_data": {
    "advanced_arabic_function_words_generator.py": {
      "filepath": "advanced_arabic_function_words_generator.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 30,
            "message": "unexpected indent",
            "text": "level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s'",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 667
      },
      "code_metrics": {
        "line_count": 667,
        "empty_lines": 128,
        "comment_lines": 62,
        "function_count": 15,
        "class_count": 3,
        "import_count": 9,
        "complexity_indicators": {
          "nested_functions": 12,
          "try_except_blocks": 1,
          "long_lines": 1,
          "deep_nesting": 30
        },
        "complexity_score": 7.01
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "advanced_arabic_phonology_system.py": {
      "filepath": "advanced_arabic_phonology_system.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 33,
            "message": "unexpected indent",
            "text": "level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s'",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 717
      },
      "code_metrics": {
        "line_count": 717,
        "empty_lines": 145,
        "comment_lines": 62,
        "function_count": 20,
        "class_count": 9,
        "import_count": 7,
        "complexity_indicators": {
          "nested_functions": 18,
          "try_except_blocks": 1,
          "long_lines": 1,
          "deep_nesting": 26
        },
        "complexity_score": 7.609999999999999
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "advanced_arabic_proper_names_generator.py": {
      "filepath": "advanced_arabic_proper_names_generator.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 28,
            "message": "unexpected indent",
            "text": "level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s'",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 1567
      },
      "code_metrics": {
        "line_count": 1567,
        "empty_lines": 250,
        "comment_lines": 115,
        "function_count": 37,
        "class_count": 6,
        "import_count": 7,
        "complexity_indicators": {
          "nested_functions": 36,
          "try_except_blocks": 1,
          "long_lines": 1,
          "deep_nesting": 242
        },
        "complexity_score": 10
      },
      "fixability_score": 8,
      "severity_score": 2,
      "category": "experimental"
    },
    "advanced_arabic_vector_generator.py": {
      "filepath": "advanced_arabic_vector_generator.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 32,
            "message": "unexpected indent",
            "text": "level=logging.INFO, format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 1155
      },
      "code_metrics": {
        "line_count": 1155,
        "empty_lines": 203,
        "comment_lines": 97,
        "function_count": 42,
        "class_count": 13,
        "import_count": 7,
        "complexity_indicators": {
          "nested_functions": 41,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 10
        },
        "complexity_score": 9.8
      },
      "fixability_score": 8,
      "severity_score": 2,
      "category": "experimental"
    },
    "advanced_ast_syntax_fixer.py": {
      "filepath": "advanced_ast_syntax_fixer.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 59,
            "message": "unexpected indent",
            "text": "SyntaxIssue()",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 395
      },
      "code_metrics": {
        "line_count": 395,
        "empty_lines": 71,
        "comment_lines": 33,
        "function_count": 12,
        "class_count": 2,
        "import_count": 9,
        "complexity_indicators": {
          "nested_functions": 11,
          "try_except_blocks": 5,
          "long_lines": 1,
          "deep_nesting": 64
        },
        "complexity_score": 10
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "tools"
    },
    "advanced_complex_word_demo.py": {
      "filepath": "advanced_complex_word_demo.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 677
      },
      "code_metrics": {
        "line_count": 677,
        "empty_lines": 103,
        "comment_lines": 30,
        "function_count": 22,
        "class_count": 1,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 21,
          "try_except_blocks": 0,
          "long_lines": 1,
          "deep_nesting": 88
        },
        "complexity_score": 10
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "arabic_demonstrative_evaluation.py": {
      "filepath": "arabic_demonstrative_evaluation.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 436
      },
      "code_metrics": {
        "line_count": 436,
        "empty_lines": 83,
        "comment_lines": 37,
        "function_count": 8,
        "class_count": 1,
        "import_count": 10,
        "complexity_indicators": {
          "nested_functions": 7,
          "try_except_blocks": 2,
          "long_lines": 2,
          "deep_nesting": 17
        },
        "complexity_score": 4.17
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "arabic_demonstrative_pronouns_advanced_tester.py": {
      "filepath": "arabic_demonstrative_pronouns_advanced_tester.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 4
      },
      "code_metrics": {
        "line_count": 4,
        "empty_lines": 0,
        "comment_lines": 4,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "arabic_demonstrative_pronouns_analyzer.py": {
      "filepath": "arabic_demonstrative_pronouns_analyzer.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 4
      },
      "code_metrics": {
        "line_count": 4,
        "empty_lines": 0,
        "comment_lines": 4,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "tools"
    },
    "arabic_demonstrative_pronouns_deep_model.py": {
      "filepath": "arabic_demonstrative_pronouns_deep_model.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 270,
            "message": "unmatched ')'",
            "text": "num_classes: int, dropout: float = 0.3):",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 813
      },
      "code_metrics": {
        "line_count": 813,
        "empty_lines": 181,
        "comment_lines": 91,
        "function_count": 25,
        "class_count": 6,
        "import_count": 9,
        "complexity_indicators": {
          "nested_functions": 22,
          "try_except_blocks": 0,
          "long_lines": 2,
          "deep_nesting": 5
        },
        "complexity_score": 5.17
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "arabic_demonstrative_pronouns_demo.py": {
      "filepath": "arabic_demonstrative_pronouns_demo.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 4
      },
      "code_metrics": {
        "line_count": 4,
        "empty_lines": 0,
        "comment_lines": 4,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "arabic_demonstrative_pronouns_generator.py": {
      "filepath": "arabic_demonstrative_pronouns_generator.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 33,
            "message": "unexpected indent",
            "text": "level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 965
      },
      "code_metrics": {
        "line_count": 965,
        "empty_lines": 170,
        "comment_lines": 76,
        "function_count": 27,
        "class_count": 6,
        "import_count": 8,
        "complexity_indicators": {
          "nested_functions": 26,
          "try_except_blocks": 1,
          "long_lines": 4,
          "deep_nesting": 51
        },
        "complexity_score": 10
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "arabic_function_words_analyzer.py": {
      "filepath": "arabic_function_words_analyzer.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 99,
            "message": "closing parenthesis ')' does not match opening parenthesis '{' on line 96",
            "text": "),",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 264
      },
      "code_metrics": {
        "line_count": 264,
        "empty_lines": 61,
        "comment_lines": 41,
        "function_count": 2,
        "class_count": 0,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 8,
          "deep_nesting": 0
        },
        "complexity_score": 0.08
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "tools"
    },
    "arabic_function_words_generator.py": {
      "filepath": "arabic_function_words_generator.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 39,
            "message": "unexpected indent",
            "text": "level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s'",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 1507
      },
      "code_metrics": {
        "line_count": 1507,
        "empty_lines": 253,
        "comment_lines": 124,
        "function_count": 37,
        "class_count": 7,
        "import_count": 8,
        "complexity_indicators": {
          "nested_functions": 35,
          "try_except_blocks": 1,
          "long_lines": 1,
          "deep_nesting": 145
        },
        "complexity_score": 10
      },
      "fixability_score": 8,
      "severity_score": 2,
      "category": "experimental"
    },
    "arabic_function_words_generator_clean.py": {
      "filepath": "arabic_function_words_generator_clean.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 26,
            "message": "unexpected indent",
            "text": "level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s'",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 830
      },
      "code_metrics": {
        "line_count": 830,
        "empty_lines": 146,
        "comment_lines": 73,
        "function_count": 23,
        "class_count": 5,
        "import_count": 6,
        "complexity_indicators": {
          "nested_functions": 22,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 102
        },
        "complexity_score": 10
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "arabic_inflection_corrected.py": {
      "filepath": "arabic_inflection_corrected.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 31,
            "message": "unexpected indent",
            "text": "level=logging.INFO,",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 405
      },
      "code_metrics": {
        "line_count": 405,
        "empty_lines": 75,
        "comment_lines": 32,
        "function_count": 8,
        "class_count": 2,
        "import_count": 7,
        "complexity_indicators": {
          "nested_functions": 7,
          "try_except_blocks": 1,
          "long_lines": 3,
          "deep_nesting": 11
        },
        "complexity_score": 3.18
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "arabic_inflection_rules_engine.py": {
      "filepath": "arabic_inflection_rules_engine.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 56,
            "message": "unexpected indent",
            "text": "level=logging.INFO,",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 988
      },
      "code_metrics": {
        "line_count": 988,
        "empty_lines": 185,
        "comment_lines": 117,
        "function_count": 24,
        "class_count": 5,
        "import_count": 10,
        "complexity_indicators": {
          "nested_functions": 23,
          "try_except_blocks": 2,
          "long_lines": 2,
          "deep_nesting": 42
        },
        "complexity_score": 10
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "arabic_inflection_ultimate.py": {
      "filepath": "arabic_inflection_ultimate.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 57,
            "message": "unexpected indent",
            "text": "level=logging.INFO,",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 721
      },
      "code_metrics": {
        "line_count": 721,
        "empty_lines": 121,
        "comment_lines": 57,
        "function_count": 14,
        "class_count": 3,
        "import_count": 9,
        "complexity_indicators": {
          "nested_functions": 13,
          "try_except_blocks": 2,
          "long_lines": 4,
          "deep_nesting": 65
        },
        "complexity_score": 10
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "arabic_inflection_ultimate_fixed.py": {
      "filepath": "arabic_inflection_ultimate_fixed.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 31,
            "message": "unexpected indent",
            "text": "level=logging.INFO,",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 603
      },
      "code_metrics": {
        "line_count": 603,
        "empty_lines": 102,
        "comment_lines": 44,
        "function_count": 9,
        "class_count": 3,
        "import_count": 8,
        "complexity_indicators": {
          "nested_functions": 8,
          "try_except_blocks": 3,
          "long_lines": 4,
          "deep_nesting": 45
        },
        "complexity_score": 8.690000000000001
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "arabic_interrogative_pronouns_deep_model.py": {
      "filepath": "arabic_interrogative_pronouns_deep_model.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 302,
            "message": "unmatched ')'",
            "text": "num_classes: int, dropout: float = 0.3):",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 859
      },
      "code_metrics": {
        "line_count": 859,
        "empty_lines": 189,
        "comment_lines": 97,
        "function_count": 25,
        "class_count": 6,
        "import_count": 9,
        "complexity_indicators": {
          "nested_functions": 22,
          "try_except_blocks": 0,
          "long_lines": 2,
          "deep_nesting": 7
        },
        "complexity_score": 5.470000000000001
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "arabic_interrogative_pronouns_enhanced.py": {
      "filepath": "arabic_interrogative_pronouns_enhanced.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 26,
            "message": "unexpected indent",
            "text": "self.model_configs = {",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 885
      },
      "code_metrics": {
        "line_count": 885,
        "empty_lines": 190,
        "comment_lines": 105,
        "function_count": 19,
        "class_count": 4,
        "import_count": 12,
        "complexity_indicators": {
          "nested_functions": 15,
          "try_except_blocks": 0,
          "long_lines": 8,
          "deep_nesting": 20
        },
        "complexity_score": 6.08
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "arabic_interrogative_pronouns_final.py": {
      "filepath": "arabic_interrogative_pronouns_final.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 95,
            "message": "unmatched ')'",
            "text": "):",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 578
      },
      "code_metrics": {
        "line_count": 578,
        "empty_lines": 141,
        "comment_lines": 62,
        "function_count": 16,
        "class_count": 4,
        "import_count": 9,
        "complexity_indicators": {
          "nested_functions": 13,
          "try_except_blocks": 0,
          "long_lines": 3,
          "deep_nesting": 2
        },
        "complexity_score": 2.93
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "arabic_interrogative_pronouns_generator.py": {
      "filepath": "arabic_interrogative_pronouns_generator.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 890
      },
      "code_metrics": {
        "line_count": 890,
        "empty_lines": 145,
        "comment_lines": 59,
        "function_count": 25,
        "class_count": 5,
        "import_count": 10,
        "complexity_indicators": {
          "nested_functions": 24,
          "try_except_blocks": 1,
          "long_lines": 4,
          "deep_nesting": 83
        },
        "complexity_score": 10
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "arabic_interrogative_pronouns_test_analysis.py": {
      "filepath": "arabic_interrogative_pronouns_test_analysis.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 30,
            "message": "unmatched ')'",
            "text": "f1_score)  # noqa: F401",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 604
      },
      "code_metrics": {
        "line_count": 604,
        "empty_lines": 129,
        "comment_lines": 62,
        "function_count": 11,
        "class_count": 2,
        "import_count": 14,
        "complexity_indicators": {
          "nested_functions": 10,
          "try_except_blocks": 0,
          "long_lines": 3,
          "deep_nesting": 34
        },
        "complexity_score": 7.13
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "test_files"
    },
    "arabic_mathematical_generator.py": {
      "filepath": "arabic_mathematical_generator.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 31,
            "message": "unexpected indent",
            "text": "level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s'",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 1487
      },
      "code_metrics": {
        "line_count": 1487,
        "empty_lines": 235,
        "comment_lines": 124,
        "function_count": 35,
        "class_count": 7,
        "import_count": 8,
        "complexity_indicators": {
          "nested_functions": 34,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 52
        },
        "complexity_score": 10
      },
      "fixability_score": 8,
      "severity_score": 2,
      "category": "experimental"
    },
    "ARABIC_MATH_GENERATOR_COMPLETION_REPORT.py": {
      "filepath": "ARABIC_MATH_GENERATOR_COMPLETION_REPORT.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 441
      },
      "code_metrics": {
        "line_count": 441,
        "empty_lines": 31,
        "comment_lines": 9,
        "function_count": 3,
        "class_count": 0,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 1,
          "long_lines": 1,
          "deep_nesting": 85
        },
        "complexity_score": 10
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "arabic_morphological_weight_generator.py": {
      "filepath": "arabic_morphological_weight_generator.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 45,
            "message": "unmatched ')'",
            "text": "GeneratedSyllable)",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 822
      },
      "code_metrics": {
        "line_count": 822,
        "empty_lines": 167,
        "comment_lines": 69,
        "function_count": 24,
        "class_count": 5,
        "import_count": 9,
        "complexity_indicators": {
          "nested_functions": 23,
          "try_except_blocks": 1,
          "long_lines": 2,
          "deep_nesting": 32
        },
        "complexity_score": 9.52
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "arabic_nlp_status_report.py": {
      "filepath": "arabic_nlp_status_report.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 103
      },
      "code_metrics": {
        "line_count": 103,
        "empty_lines": 18,
        "comment_lines": 6,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "arabic_normalizer.py": {
      "filepath": "arabic_normalizer.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 565
      },
      "code_metrics": {
        "line_count": 565,
        "empty_lines": 77,
        "comment_lines": 38,
        "function_count": 19,
        "class_count": 4,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 19,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 11
        },
        "complexity_score": 5.45
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "arabic_phoneme_word_decision_tree.py": {
      "filepath": "arabic_phoneme_word_decision_tree.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 1194
      },
      "code_metrics": {
        "line_count": 1194,
        "empty_lines": 106,
        "comment_lines": 57,
        "function_count": 24,
        "class_count": 4,
        "import_count": 6,
        "complexity_indicators": {
          "nested_functions": 23,
          "try_except_blocks": 1,
          "long_lines": 3,
          "deep_nesting": 239
        },
        "complexity_score": 10
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "arabic_phonological_foundation.py": {
      "filepath": "arabic_phonological_foundation.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 43,
            "message": "unexpected indent",
            "text": "level=logging.INFO,",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 1179
      },
      "code_metrics": {
        "line_count": 1179,
        "empty_lines": 141,
        "comment_lines": 124,
        "function_count": 15,
        "class_count": 8,
        "import_count": 6,
        "complexity_indicators": {
          "nested_functions": 12,
          "try_except_blocks": 4,
          "long_lines": 2,
          "deep_nesting": 21
        },
        "complexity_score": 5.970000000000001
      },
      "fixability_score": 8,
      "severity_score": 2,
      "category": "experimental"
    },
    "arabic_pronouns_analyzer.py": {
      "filepath": "arabic_pronouns_analyzer.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 32,
            "message": "unmatched ')'",
            "text": "ArabicPronounsDatabase)  # noqa: F401",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 528
      },
      "code_metrics": {
        "line_count": 528,
        "empty_lines": 126,
        "comment_lines": 47,
        "function_count": 14,
        "class_count": 2,
        "import_count": 8,
        "complexity_indicators": {
          "nested_functions": 13,
          "try_except_blocks": 0,
          "long_lines": 6,
          "deep_nesting": 5
        },
        "complexity_score": 3.41
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "tools"
    },
    "arabic_pronouns_deep_model.py": {
      "filepath": "arabic_pronouns_deep_model.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 39,
            "message": "unmatched ')'",
            "text": "):",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 575
      },
      "code_metrics": {
        "line_count": 575,
        "empty_lines": 149,
        "comment_lines": 55,
        "function_count": 24,
        "class_count": 7,
        "import_count": 7,
        "complexity_indicators": {
          "nested_functions": 23,
          "try_except_blocks": 0,
          "long_lines": 1,
          "deep_nesting": 10
        },
        "complexity_score": 6.11
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "arabic_pronouns_generator.py": {
      "filepath": "arabic_pronouns_generator.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 884
      },
      "code_metrics": {
        "line_count": 884,
        "empty_lines": 151,
        "comment_lines": 65,
        "function_count": 23,
        "class_count": 10,
        "import_count": 9,
        "complexity_indicators": {
          "nested_functions": 22,
          "try_except_blocks": 1,
          "long_lines": 3,
          "deep_nesting": 45
        },
        "complexity_score": 10
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "arabic_pronouns_generator_enhanced.py": {
      "filepath": "arabic_pronouns_generator_enhanced.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 170,
            "message": "unmatched ')'",
            "text": ") -> Tuple[float, List[str]]:",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 520
      },
      "code_metrics": {
        "line_count": 520,
        "empty_lines": 115,
        "comment_lines": 44,
        "function_count": 18,
        "class_count": 3,
        "import_count": 5,
        "complexity_indicators": {
          "nested_functions": 17,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 11
        },
        "complexity_score": 5.05
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "arabic_relative_pronouns_advanced_tester.py": {
      "filepath": "arabic_relative_pronouns_advanced_tester.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 626
      },
      "code_metrics": {
        "line_count": 626,
        "empty_lines": 113,
        "comment_lines": 32,
        "function_count": 15,
        "class_count": 1,
        "import_count": 8,
        "complexity_indicators": {
          "nested_functions": 14,
          "try_except_blocks": 0,
          "long_lines": 2,
          "deep_nesting": 13
        },
        "complexity_score": 4.7700000000000005
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "arabic_relative_pronouns_analyzer.py": {
      "filepath": "arabic_relative_pronouns_analyzer.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 660
      },
      "code_metrics": {
        "line_count": 660,
        "empty_lines": 147,
        "comment_lines": 51,
        "function_count": 16,
        "class_count": 2,
        "import_count": 9,
        "complexity_indicators": {
          "nested_functions": 15,
          "try_except_blocks": 0,
          "long_lines": 6,
          "deep_nesting": 6
        },
        "complexity_score": 3.96
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "tools"
    },
    "arabic_relative_pronouns_deep_model.py": {
      "filepath": "arabic_relative_pronouns_deep_model.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 27,
            "message": "unmatched ')'",
            "text": "confusion_matrix)",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 844
      },
      "code_metrics": {
        "line_count": 844,
        "empty_lines": 186,
        "comment_lines": 77,
        "function_count": 40,
        "class_count": 10,
        "import_count": 9,
        "complexity_indicators": {
          "nested_functions": 39,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 12
        },
        "complexity_score": 9.7
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "arabic_relative_pronouns_deep_model_simplified.py": {
      "filepath": "arabic_relative_pronouns_deep_model_simplified.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 207,
            "message": "unmatched ')'",
            "text": "processor: RelativePronounPhoneticProcessor, max_length: int = 20):",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 665
      },
      "code_metrics": {
        "line_count": 665,
        "empty_lines": 141,
        "comment_lines": 55,
        "function_count": 29,
        "class_count": 8,
        "import_count": 7,
        "complexity_indicators": {
          "nested_functions": 28,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 4
        },
        "complexity_score": 6.2
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "arabic_relative_pronouns_generator.py": {
      "filepath": "arabic_relative_pronouns_generator.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 785
      },
      "code_metrics": {
        "line_count": 785,
        "empty_lines": 133,
        "comment_lines": 49,
        "function_count": 22,
        "class_count": 6,
        "import_count": 7,
        "complexity_indicators": {
          "nested_functions": 21,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 83
        },
        "complexity_score": 10
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "arabic_syllable_generator.py": {
      "filepath": "arabic_syllable_generator.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 675
      },
      "code_metrics": {
        "line_count": 675,
        "empty_lines": 141,
        "comment_lines": 64,
        "function_count": 17,
        "class_count": 4,
        "import_count": 8,
        "complexity_indicators": {
          "nested_functions": 16,
          "try_except_blocks": 0,
          "long_lines": 3,
          "deep_nesting": 95
        },
        "complexity_score": 10
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "arabic_test.py": {
      "filepath": "arabic_test.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 79,
            "message": "unterminated string literal (detected at line 79)",
            "text": "print(f\"Phonemize result: '{result'}\")",
            "type": "string_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "string_error"
        ],
        "line_count": 89
      },
      "code_metrics": {
        "line_count": 89,
        "empty_lines": 16,
        "comment_lines": 10,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.1
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "arabic_vector_engine.py": {
      "filepath": "arabic_vector_engine.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 28,
            "message": "unexpected indent",
            "text": "level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\"",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 847
      },
      "code_metrics": {
        "line_count": 847,
        "empty_lines": 147,
        "comment_lines": 78,
        "function_count": 17,
        "class_count": 8,
        "import_count": 7,
        "complexity_indicators": {
          "nested_functions": 16,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 20
        },
        "complexity_score": 6.3
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "arabic_verb_conjugator.py": {
      "filepath": "arabic_verb_conjugator.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 49,
            "message": "unexpected indent",
            "text": "level=logging.INFO,",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 1057
      },
      "code_metrics": {
        "line_count": 1057,
        "empty_lines": 189,
        "comment_lines": 84,
        "function_count": 19,
        "class_count": 7,
        "import_count": 12,
        "complexity_indicators": {
          "nested_functions": 18,
          "try_except_blocks": 4,
          "long_lines": 3,
          "deep_nesting": 111
        },
        "complexity_score": 10
      },
      "fixability_score": 8,
      "severity_score": 2,
      "category": "experimental"
    },
    "arabic_word_tracer_app.py": {
      "filepath": "arabic_word_tracer_app.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 6
      },
      "code_metrics": {
        "line_count": 6,
        "empty_lines": 1,
        "comment_lines": 5,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "arabic_word_tracer_demo.py": {
      "filepath": "arabic_word_tracer_demo.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 6
      },
      "code_metrics": {
        "line_count": 6,
        "empty_lines": 1,
        "comment_lines": 5,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "backup_unified_plugin_manager.py": {
      "filepath": "backup_unified_plugin_manager.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 23,
            "message": "unexpected indent",
            "text": "level=logging.INFO,",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 549
      },
      "code_metrics": {
        "line_count": 549,
        "empty_lines": 87,
        "comment_lines": 31,
        "function_count": 10,
        "class_count": 7,
        "import_count": 9,
        "complexity_indicators": {
          "nested_functions": 10,
          "try_except_blocks": 7,
          "long_lines": 2,
          "deep_nesting": 12
        },
        "complexity_score": 4.5200000000000005
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "check_violations.py": {
      "filepath": "check_violations.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 24
      },
      "code_metrics": {
        "line_count": 24,
        "empty_lines": 4,
        "comment_lines": 10,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "check_violations_v2.py": {
      "filepath": "check_violations_v2.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 6
      },
      "code_metrics": {
        "line_count": 6,
        "empty_lines": 1,
        "comment_lines": 5,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "citation_standardization_system.py": {
      "filepath": "citation_standardization_system.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 127,
            "message": "closing parenthesis ')' does not match opening parenthesis '[' on line 120",
            "text": ")",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 589
      },
      "code_metrics": {
        "line_count": 589,
        "empty_lines": 116,
        "comment_lines": 78,
        "function_count": 13,
        "class_count": 4,
        "import_count": 6,
        "complexity_indicators": {
          "nested_functions": 12,
          "try_except_blocks": 3,
          "long_lines": 7,
          "deep_nesting": 2
        },
        "complexity_score": 3.07
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "complete_all_13_engines.py": {
      "filepath": "complete_all_13_engines.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 43,
            "message": "unexpected indent",
            "text": "level=logging.INFO,",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 1369
      },
      "code_metrics": {
        "line_count": 1369,
        "empty_lines": 256,
        "comment_lines": 204,
        "function_count": 46,
        "class_count": 8,
        "import_count": 8,
        "complexity_indicators": {
          "nested_functions": 45,
          "try_except_blocks": 16,
          "long_lines": 73,
          "deep_nesting": 55
        },
        "complexity_score": 10
      },
      "fixability_score": 8,
      "severity_score": 2,
      "category": "experimental"
    },
    "complete_arabic_phonological_coverage.py": {
      "filepath": "complete_arabic_phonological_coverage.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 28,
            "message": "unexpected indent",
            "text": "level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s'",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 882
      },
      "code_metrics": {
        "line_count": 882,
        "empty_lines": 126,
        "comment_lines": 72,
        "function_count": 17,
        "class_count": 4,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 16,
          "try_except_blocks": 0,
          "long_lines": 2,
          "deep_nesting": 112
        },
        "complexity_score": 10
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "complete_arabic_phonological_foundation.py": {
      "filepath": "complete_arabic_phonological_foundation.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 31,
            "message": "unexpected indent",
            "text": "level=logging.INFO,",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 899
      },
      "code_metrics": {
        "line_count": 899,
        "empty_lines": 117,
        "comment_lines": 95,
        "function_count": 8,
        "class_count": 8,
        "import_count": 5,
        "complexity_indicators": {
          "nested_functions": 5,
          "try_except_blocks": 1,
          "long_lines": 2,
          "deep_nesting": 18
        },
        "complexity_score": 3.8200000000000003
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "complete_arabic_tracer.py": {
      "filepath": "complete_arabic_tracer.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 47,
            "message": "unexpected indent",
            "text": "\"ب\": {\"type\": \"consonant\", \"place\": \"bilabial\", \"manner\": \"stop\"},",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 623
      },
      "code_metrics": {
        "line_count": 623,
        "empty_lines": 89,
        "comment_lines": 20,
        "function_count": 14,
        "class_count": 1,
        "import_count": 5,
        "complexity_indicators": {
          "nested_functions": 12,
          "try_except_blocks": 1,
          "long_lines": 2,
          "deep_nesting": 56
        },
        "complexity_score": 10
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "complex_word_analysis_demo.py": {
      "filepath": "complex_word_analysis_demo.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 26,
            "message": "unmatched ')'",
            "text": "PhonemicLayer)  # noqa: F401",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 433
      },
      "code_metrics": {
        "line_count": 433,
        "empty_lines": 80,
        "comment_lines": 23,
        "function_count": 29,
        "class_count": 1,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 27,
          "try_except_blocks": 0,
          "long_lines": 3,
          "deep_nesting": 5
        },
        "complexity_score": 6.18
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "comprehensive_arabic_phonological_system.py": {
      "filepath": "comprehensive_arabic_phonological_system.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 1226
      },
      "code_metrics": {
        "line_count": 1226,
        "empty_lines": 150,
        "comment_lines": 71,
        "function_count": 30,
        "class_count": 15,
        "import_count": 11,
        "complexity_indicators": {
          "nested_functions": 28,
          "try_except_blocks": 4,
          "long_lines": 0,
          "deep_nesting": 69
        },
        "complexity_score": 10
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "comprehensive_arabic_verb_syllable_generator.py": {
      "filepath": "comprehensive_arabic_verb_syllable_generator.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 31,
            "message": "unexpected indent",
            "text": "level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s'",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 1095
      },
      "code_metrics": {
        "line_count": 1095,
        "empty_lines": 175,
        "comment_lines": 82,
        "function_count": 28,
        "class_count": 5,
        "import_count": 7,
        "complexity_indicators": {
          "nested_functions": 27,
          "try_except_blocks": 1,
          "long_lines": 1,
          "deep_nesting": 92
        },
        "complexity_score": 10
      },
      "fixability_score": 8,
      "severity_score": 2,
      "category": "experimental"
    },
    "comprehensive_encoding_fix.py": {
      "filepath": "comprehensive_encoding_fix.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 85,
            "message": "unexpected indent",
            "text": "[\"powershell.exe\", \" ExecutionPolicy\", \"Bypass\", \" File\", ps_fix_path],",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 241
      },
      "code_metrics": {
        "line_count": 241,
        "empty_lines": 42,
        "comment_lines": 24,
        "function_count": 2,
        "class_count": 0,
        "import_count": 8,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 5,
          "long_lines": 1,
          "deep_nesting": 20
        },
        "complexity_score": 3.5100000000000002
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "comprehensive_engine_analysis.py": {
      "filepath": "comprehensive_engine_analysis.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 385
      },
      "code_metrics": {
        "line_count": 385,
        "empty_lines": 61,
        "comment_lines": 26,
        "function_count": 7,
        "class_count": 1,
        "import_count": 8,
        "complexity_indicators": {
          "nested_functions": 6,
          "try_except_blocks": 3,
          "long_lines": 2,
          "deep_nesting": 60
        },
        "complexity_score": 10
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "comprehensive_file_analysis.py": {
      "filepath": "comprehensive_file_analysis.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 634
      },
      "code_metrics": {
        "line_count": 634,
        "empty_lines": 108,
        "comment_lines": 31,
        "function_count": 14,
        "class_count": 1,
        "import_count": 9,
        "complexity_indicators": {
          "nested_functions": 13,
          "try_except_blocks": 3,
          "long_lines": 1,
          "deep_nesting": 71
        },
        "complexity_score": 10
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "comprehensive_phoneme_engine.py": {
      "filepath": "comprehensive_phoneme_engine.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 78,
            "message": "unmatched ')'",
            "text": "encoding='utf 8') as f:",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 743
      },
      "code_metrics": {
        "line_count": 743,
        "empty_lines": 108,
        "comment_lines": 38,
        "function_count": 31,
        "class_count": 2,
        "import_count": 6,
        "complexity_indicators": {
          "nested_functions": 30,
          "try_except_blocks": 4,
          "long_lines": 7,
          "deep_nesting": 23
        },
        "complexity_score": 9.92
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "comprehensive_progressive_system.py": {
      "filepath": "comprehensive_progressive_system.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 41,
            "message": "unexpected indent",
            "text": "level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\"",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 1394
      },
      "code_metrics": {
        "line_count": 1394,
        "empty_lines": 220,
        "comment_lines": 88,
        "function_count": 30,
        "class_count": 10,
        "import_count": 6,
        "complexity_indicators": {
          "nested_functions": 29,
          "try_except_blocks": 2,
          "long_lines": 3,
          "deep_nesting": 218
        },
        "complexity_score": 10
      },
      "fixability_score": 8,
      "severity_score": 2,
      "category": "experimental"
    },
    "comprehensive_syntax_batch_fixer.py": {
      "filepath": "comprehensive_syntax_batch_fixer.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 57,
            "message": "unterminated string literal (detected at line 57)",
            "text": "\"pattern\": r'\\bff\"',\"",
            "type": "string_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "string_error"
        ],
        "line_count": 389
      },
      "code_metrics": {
        "line_count": 389,
        "empty_lines": 65,
        "comment_lines": 32,
        "function_count": 11,
        "class_count": 2,
        "import_count": 7,
        "complexity_indicators": {
          "nested_functions": 10,
          "try_except_blocks": 5,
          "long_lines": 7,
          "deep_nesting": 18
        },
        "complexity_score": 5.2700000000000005
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "tools"
    },
    "create_working_engines.py": {
      "filepath": "create_working_engines.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 203
      },
      "code_metrics": {
        "line_count": 203,
        "empty_lines": 41,
        "comment_lines": 10,
        "function_count": 15,
        "class_count": 0,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 13,
          "try_except_blocks": 2,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 2.8
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "critical_syntax_fixer.py": {
      "filepath": "critical_syntax_fixer.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 182
      },
      "code_metrics": {
        "line_count": 182,
        "empty_lines": 36,
        "comment_lines": 12,
        "function_count": 10,
        "class_count": 1,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 9,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 5
        },
        "complexity_score": 2.65
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "tools"
    },
    "debug_output.py": {
      "filepath": "debug_output.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 28
      },
      "code_metrics": {
        "line_count": 28,
        "empty_lines": 9,
        "comment_lines": 7,
        "function_count": 1,
        "class_count": 0,
        "import_count": 1,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "debug_test.py": {
      "filepath": "debug_test.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 32,
            "message": "unterminated string literal (detected at line 32)",
            "text": "print(f\"✅ Phonemize result: '{result'}\")",
            "type": "string_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "string_error"
        ],
        "line_count": 45
      },
      "code_metrics": {
        "line_count": 45,
        "empty_lines": 15,
        "comment_lines": 7,
        "function_count": 1,
        "class_count": 0,
        "import_count": 1,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.1
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "demo_all_engines.py": {
      "filepath": "demo_all_engines.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 6
      },
      "code_metrics": {
        "line_count": 6,
        "empty_lines": 1,
        "comment_lines": 5,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "disable_error_squiggles.py": {
      "filepath": "disable_error_squiggles.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 6
      },
      "code_metrics": {
        "line_count": 6,
        "empty_lines": 1,
        "comment_lines": 5,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "documentation_standards.py": {
      "filepath": "documentation_standards.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 6
      },
      "code_metrics": {
        "line_count": 6,
        "empty_lines": 1,
        "comment_lines": 5,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "emergency_reorganization_system.py": {
      "filepath": "emergency_reorganization_system.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 6
      },
      "code_metrics": {
        "line_count": 6,
        "empty_lines": 1,
        "comment_lines": 5,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "tools"
    },
    "emergency_syntax_fixer.py": {
      "filepath": "emergency_syntax_fixer.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 16,
            "message": "unexpected indent",
            "text": "level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s'",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 290
      },
      "code_metrics": {
        "line_count": 290,
        "empty_lines": 68,
        "comment_lines": 27,
        "function_count": 12,
        "class_count": 1,
        "import_count": 5,
        "complexity_indicators": {
          "nested_functions": 11,
          "try_except_blocks": 3,
          "long_lines": 0,
          "deep_nesting": 20
        },
        "complexity_score": 5.5
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "tools"
    },
    "engine_fix_guide.py": {
      "filepath": "engine_fix_guide.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 98
      },
      "code_metrics": {
        "line_count": 98,
        "empty_lines": 15,
        "comment_lines": 7,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "tools"
    },
    "enhanced_citation_validator.py": {
      "filepath": "enhanced_citation_validator.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 6
      },
      "code_metrics": {
        "line_count": 6,
        "empty_lines": 1,
        "comment_lines": 5,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "tools"
    },
    "enhanced_demo_all_engines.py": {
      "filepath": "enhanced_demo_all_engines.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 6
      },
      "code_metrics": {
        "line_count": 6,
        "empty_lines": 1,
        "comment_lines": 5,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "enhanced_final_analysis.py": {
      "filepath": "enhanced_final_analysis.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 23,
            "message": "unmatched ')'",
            "text": "PronounsReportGenerator)  # noqa: F401",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 250
      },
      "code_metrics": {
        "line_count": 250,
        "empty_lines": 48,
        "comment_lines": 27,
        "function_count": 3,
        "class_count": 2,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 2,
          "try_except_blocks": 0,
          "long_lines": 3,
          "deep_nesting": 19
        },
        "complexity_score": 3.28
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "enhanced_system_architecture.py": {
      "filepath": "enhanced_system_architecture.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 97,
            "message": "unmatched ')'",
            "text": ") -> EnhancedVectorOutput:",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 647
      },
      "code_metrics": {
        "line_count": 647,
        "empty_lines": 128,
        "comment_lines": 56,
        "function_count": 13,
        "class_count": 3,
        "import_count": 10,
        "complexity_indicators": {
          "nested_functions": 13,
          "try_except_blocks": 3,
          "long_lines": 0,
          "deep_nesting": 75
        },
        "complexity_score": 10
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "final_arrow_syntax_fixer.py": {
      "filepath": "final_arrow_syntax_fixer.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 149,
            "message": "unmatched ')'",
            "text": ")",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 174
      },
      "code_metrics": {
        "line_count": 174,
        "empty_lines": 40,
        "comment_lines": 14,
        "function_count": 6,
        "class_count": 1,
        "import_count": 5,
        "complexity_indicators": {
          "nested_functions": 5,
          "try_except_blocks": 2,
          "long_lines": 5,
          "deep_nesting": 3
        },
        "complexity_score": 1.7
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "tools"
    },
    "final_comprehensive_cleanup.py": {
      "filepath": "final_comprehensive_cleanup.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 6
      },
      "code_metrics": {
        "line_count": 6,
        "empty_lines": 1,
        "comment_lines": 5,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "final_comprehensive_comparison.py": {
      "filepath": "final_comprehensive_comparison.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 135,
            "message": "closing parenthesis ')' does not match opening parenthesis '{' on line 130",
            "text": "),",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 441
      },
      "code_metrics": {
        "line_count": 441,
        "empty_lines": 39,
        "comment_lines": 13,
        "function_count": 15,
        "class_count": 1,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 14,
          "try_except_blocks": 0,
          "long_lines": 10,
          "deep_nesting": 32
        },
        "complexity_score": 7.7
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "final_comprehensive_report.py": {
      "filepath": "final_comprehensive_report.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 192
      },
      "code_metrics": {
        "line_count": 192,
        "empty_lines": 35,
        "comment_lines": 12,
        "function_count": 3,
        "class_count": 0,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 4,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.4
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "final_comprehensive_report_generator.py": {
      "filepath": "final_comprehensive_report_generator.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 163,
            "message": "closing parenthesis ')' does not match opening parenthesis '{' on line 141",
            "text": "),",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 457
      },
      "code_metrics": {
        "line_count": 457,
        "empty_lines": 74,
        "comment_lines": 39,
        "function_count": 8,
        "class_count": 1,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 7,
          "try_except_blocks": 0,
          "long_lines": 18,
          "deep_nesting": 5
        },
        "complexity_score": 2.33
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "fixed_demo_all_engines.py": {
      "filepath": "fixed_demo_all_engines.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 6
      },
      "code_metrics": {
        "line_count": 6,
        "empty_lines": 1,
        "comment_lines": 5,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "fix_comparison_operators.py": {
      "filepath": "fix_comparison_operators.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 37,
            "message": "unexpected indent",
            "text": "original_content.count('>= ') + original_content.count('<= ') + original_content.count('>= ')",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 68
      },
      "code_metrics": {
        "line_count": 68,
        "empty_lines": 17,
        "comment_lines": 4,
        "function_count": 1,
        "class_count": 0,
        "import_count": 2,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 1,
          "long_lines": 1,
          "deep_nesting": 2
        },
        "complexity_score": 0.41
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "tools"
    },
    "fix_fstring_syntax.py": {
      "filepath": "fix_fstring_syntax.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 37,
            "message": "unterminated string literal (detected at line 37)",
            "text": "fixes_1 = len(re.findall(r'\\bff\"', original_content))\"",
            "type": "string_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "string_error"
        ],
        "line_count": 154
      },
      "code_metrics": {
        "line_count": 154,
        "empty_lines": 38,
        "comment_lines": 10,
        "function_count": 5,
        "class_count": 1,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 4,
          "try_except_blocks": 1,
          "long_lines": 4,
          "deep_nesting": 0
        },
        "complexity_score": 0.9400000000000001
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "tools"
    },
    "fix_import_data.py": {
      "filepath": "fix_import_data.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 123,
            "message": "unmatched ')'",
            "text": ")",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 147
      },
      "code_metrics": {
        "line_count": 147,
        "empty_lines": 37,
        "comment_lines": 10,
        "function_count": 5,
        "class_count": 1,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 4,
          "try_except_blocks": 1,
          "long_lines": 2,
          "deep_nesting": 4
        },
        "complexity_score": 1.52
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "tools"
    },
    "fix_numeric_comparisons.py": {
      "filepath": "fix_numeric_comparisons.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 64,
            "message": "unmatched ')'",
            "text": ")",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 74
      },
      "code_metrics": {
        "line_count": 74,
        "empty_lines": 20,
        "comment_lines": 6,
        "function_count": 1,
        "class_count": 0,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 1,
          "long_lines": 1,
          "deep_nesting": 1
        },
        "complexity_score": 0.26
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "tools"
    },
    "fix_return_type_arrow.py": {
      "filepath": "fix_return_type_arrow.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 122,
            "message": "unmatched ')'",
            "text": ")",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 146
      },
      "code_metrics": {
        "line_count": 146,
        "empty_lines": 37,
        "comment_lines": 10,
        "function_count": 5,
        "class_count": 1,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 4,
          "try_except_blocks": 1,
          "long_lines": 2,
          "deep_nesting": 4
        },
        "complexity_score": 1.52
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "tools"
    },
    "fix_syntax_errors.py": {
      "filepath": "fix_syntax_errors.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 34,
            "message": "unexpected indent",
            "text": "r'\\bfrom\\s+([^\\s]+)\\s+import\\s+', r'from \\1 import ', content",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 138
      },
      "code_metrics": {
        "line_count": 138,
        "empty_lines": 35,
        "comment_lines": 15,
        "function_count": 3,
        "class_count": 0,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 2,
          "long_lines": 0,
          "deep_nesting": 8
        },
        "complexity_score": 1.4
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "tools"
    },
    "fix_winsurf_issues.py": {
      "filepath": "fix_winsurf_issues.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 346
      },
      "code_metrics": {
        "line_count": 346,
        "empty_lines": 69,
        "comment_lines": 25,
        "function_count": 12,
        "class_count": 1,
        "import_count": 8,
        "complexity_indicators": {
          "nested_functions": 11,
          "try_except_blocks": 2,
          "long_lines": 0,
          "deep_nesting": 22
        },
        "complexity_score": 5.7
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "tools"
    },
    "forensic_audit.py": {
      "filepath": "forensic_audit.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 90,
            "message": "unmatched ')'",
            "text": ")",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 432
      },
      "code_metrics": {
        "line_count": 432,
        "empty_lines": 82,
        "comment_lines": 25,
        "function_count": 12,
        "class_count": 1,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 11,
          "try_except_blocks": 1,
          "long_lines": 14,
          "deep_nesting": 67
        },
        "complexity_score": 10
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "hafez_morphology_reactor.py": {
      "filepath": "hafez_morphology_reactor.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 62,
            "message": "unexpected indent",
            "text": "level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 1067
      },
      "code_metrics": {
        "line_count": 1067,
        "empty_lines": 172,
        "comment_lines": 67,
        "function_count": 38,
        "class_count": 7,
        "import_count": 13,
        "complexity_indicators": {
          "nested_functions": 37,
          "try_except_blocks": 16,
          "long_lines": 4,
          "deep_nesting": 145
        },
        "complexity_score": 10
      },
      "fixability_score": 8,
      "severity_score": 2,
      "category": "experimental"
    },
    "hafez_phonemes.py": {
      "filepath": "hafez_phonemes.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 135
      },
      "code_metrics": {
        "line_count": 135,
        "empty_lines": 20,
        "comment_lines": 13,
        "function_count": 5,
        "class_count": 1,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 5,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 1.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "hafez_syllables.py": {
      "filepath": "hafez_syllables.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 161
      },
      "code_metrics": {
        "line_count": 161,
        "empty_lines": 33,
        "comment_lines": 15,
        "function_count": 7,
        "class_count": 1,
        "import_count": 2,
        "complexity_indicators": {
          "nested_functions": 7,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 4
        },
        "complexity_score": 2.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "harakat_engine.py": {
      "filepath": "harakat_engine.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 79,
            "message": "closing parenthesis ')' does not match opening parenthesis '{' on line 76",
            "text": "),",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 550
      },
      "code_metrics": {
        "line_count": 550,
        "empty_lines": 92,
        "comment_lines": 36,
        "function_count": 18,
        "class_count": 3,
        "import_count": 5,
        "complexity_indicators": {
          "nested_functions": 17,
          "try_except_blocks": 3,
          "long_lines": 1,
          "deep_nesting": 26
        },
        "complexity_score": 7.609999999999999
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "hierarchical_demo.py": {
      "filepath": "hierarchical_demo.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 26,
            "message": "unmatched ')'",
            "text": "is_emphatic)",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 307
      },
      "code_metrics": {
        "line_count": 307,
        "empty_lines": 59,
        "comment_lines": 18,
        "function_count": 9,
        "class_count": 1,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 8,
          "try_except_blocks": 6,
          "long_lines": 1,
          "deep_nesting": 5
        },
        "complexity_score": 2.96
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "hierarchical_graph_engine.py": {
      "filepath": "hierarchical_graph_engine.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 132,
            "message": "unmatched ')'",
            "text": ") -> EngineOutput:",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 1756
      },
      "code_metrics": {
        "line_count": 1756,
        "empty_lines": 315,
        "comment_lines": 118,
        "function_count": 75,
        "class_count": 17,
        "import_count": 8,
        "complexity_indicators": {
          "nested_functions": 74,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 69
        },
        "complexity_score": 10
      },
      "fixability_score": 7,
      "severity_score": 4,
      "category": "experimental"
    },
    "integrated_engine.py": {
      "filepath": "integrated_engine.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 70,
            "message": "unmatched ')'",
            "text": ") as f:",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 440
      },
      "code_metrics": {
        "line_count": 440,
        "empty_lines": 79,
        "comment_lines": 32,
        "function_count": 22,
        "class_count": 2,
        "import_count": 6,
        "complexity_indicators": {
          "nested_functions": 21,
          "try_except_blocks": 2,
          "long_lines": 4,
          "deep_nesting": 1
        },
        "complexity_score": 4.59
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "integrated_progressive_system.py": {
      "filepath": "integrated_progressive_system.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 34,
            "message": "unmatched ')'",
            "text": "EngineCategory)",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 484
      },
      "code_metrics": {
        "line_count": 484,
        "empty_lines": 79,
        "comment_lines": 36,
        "function_count": 8,
        "class_count": 1,
        "import_count": 6,
        "complexity_indicators": {
          "nested_functions": 7,
          "try_except_blocks": 2,
          "long_lines": 3,
          "deep_nesting": 114
        },
        "complexity_score": 10
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "interactive_progressive_analyzer.py": {
      "filepath": "interactive_progressive_analyzer.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 35,
            "message": "unmatched ')'",
            "text": "ComprehensiveProgressiveVectorSystem)  # noqa: F401",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 319
      },
      "code_metrics": {
        "line_count": 319,
        "empty_lines": 73,
        "comment_lines": 25,
        "function_count": 7,
        "class_count": 0,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 3,
          "long_lines": 1,
          "deep_nesting": 0
        },
        "complexity_score": 0.31
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "tools"
    },
    "manual_test_fix.py": {
      "filepath": "manual_test_fix.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 33
      },
      "code_metrics": {
        "line_count": 33,
        "empty_lines": 11,
        "comment_lines": 2,
        "function_count": 1,
        "class_count": 0,
        "import_count": 1,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "master_integration_system.py": {
      "filepath": "master_integration_system.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 6
      },
      "code_metrics": {
        "line_count": 6,
        "empty_lines": 1,
        "comment_lines": 5,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "morphology_model.py": {
      "filepath": "morphology_model.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 148,
            "message": "unexpected indent",
            "text": "text=data[\"text\"],",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 354
      },
      "code_metrics": {
        "line_count": 354,
        "empty_lines": 69,
        "comment_lines": 15,
        "function_count": 28,
        "class_count": 7,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 28,
          "try_except_blocks": 2,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 5.8
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "phonemes_harakat_analyzer.py": {
      "filepath": "phonemes_harakat_analyzer.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 201,
            "message": "unexpected indent",
            "text": "letter=p[\"letter\"],",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 758
      },
      "code_metrics": {
        "line_count": 758,
        "empty_lines": 75,
        "comment_lines": 26,
        "function_count": 20,
        "class_count": 3,
        "import_count": 6,
        "complexity_indicators": {
          "nested_functions": 19,
          "try_except_blocks": 3,
          "long_lines": 0,
          "deep_nesting": 116
        },
        "complexity_score": 10
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "tools"
    },
    "phoneme_model.py": {
      "filepath": "phoneme_model.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 348
      },
      "code_metrics": {
        "line_count": 348,
        "empty_lines": 65,
        "comment_lines": 9,
        "function_count": 25,
        "class_count": 8,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 25,
          "try_except_blocks": 3,
          "long_lines": 0,
          "deep_nesting": 6
        },
        "complexity_score": 6.2
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "phoneme_weight_map.py": {
      "filepath": "phoneme_weight_map.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 572
      },
      "code_metrics": {
        "line_count": 572,
        "empty_lines": 42,
        "comment_lines": 13,
        "function_count": 12,
        "class_count": 2,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 12,
          "try_except_blocks": 0,
          "long_lines": 1,
          "deep_nesting": 32
        },
        "complexity_score": 7.209999999999999
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "phonology_core_unified.py": {
      "filepath": "phonology_core_unified.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 31,
            "message": "unexpected indent",
            "text": "level=logging.INFO,",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 1281
      },
      "code_metrics": {
        "line_count": 1281,
        "empty_lines": 202,
        "comment_lines": 90,
        "function_count": 43,
        "class_count": 8,
        "import_count": 5,
        "complexity_indicators": {
          "nested_functions": 42,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 56
        },
        "complexity_score": 10
      },
      "fixability_score": 8,
      "severity_score": 2,
      "category": "experimental"
    },
    "precision_violation_fixer.py": {
      "filepath": "precision_violation_fixer.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 309
      },
      "code_metrics": {
        "line_count": 309,
        "empty_lines": 70,
        "comment_lines": 48,
        "function_count": 7,
        "class_count": 1,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 6,
          "try_except_blocks": 0,
          "long_lines": 14,
          "deep_nesting": 0
        },
        "complexity_score": 1.34
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "tools"
    },
    "progressive_integration_analysis.py": {
      "filepath": "progressive_integration_analysis.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 110
      },
      "code_metrics": {
        "line_count": 110,
        "empty_lines": 18,
        "comment_lines": 7,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "progressive_vector_tracker.py": {
      "filepath": "progressive_vector_tracker.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 46,
            "message": "unexpected indent",
            "text": "level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\"",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 1630
      },
      "code_metrics": {
        "line_count": 1630,
        "empty_lines": 271,
        "comment_lines": 112,
        "function_count": 30,
        "class_count": 25,
        "import_count": 5,
        "complexity_indicators": {
          "nested_functions": 29,
          "try_except_blocks": 2,
          "long_lines": 0,
          "deep_nesting": 126
        },
        "complexity_score": 10
      },
      "fixability_score": 8,
      "severity_score": 2,
      "category": "experimental"
    },
    "PROJECT_COMPLETION_REPORT.py": {
      "filepath": "PROJECT_COMPLETION_REPORT.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 234
      },
      "code_metrics": {
        "line_count": 234,
        "empty_lines": 44,
        "comment_lines": 6,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 11
        },
        "complexity_score": 1.65
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "quality_status_report.py": {
      "filepath": "quality_status_report.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 54,
            "message": "invalid syntax. Perhaps you forgot a comma?",
            "text": "print(f\"   {category.capitalize()}: {count files}\")",
            "type": "syntax_error"
          }
        ],
        "severity_score": 6,
        "error_types": [
          "syntax_error"
        ],
        "line_count": 183
      },
      "code_metrics": {
        "line_count": 183,
        "empty_lines": 28,
        "comment_lines": 12,
        "function_count": 3,
        "class_count": 0,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.1
      },
      "fixability_score": 7,
      "severity_score": 6,
      "category": "experimental"
    },
    "remove_arabic_forever.py": {
      "filepath": "remove_arabic_forever.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 155
      },
      "code_metrics": {
        "line_count": 155,
        "empty_lines": 31,
        "comment_lines": 21,
        "function_count": 1,
        "class_count": 0,
        "import_count": 6,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 18
        },
        "complexity_score": 2.8
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "run_all_nlp_engines.py": {
      "filepath": "run_all_nlp_engines.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 34,
            "message": "unexpected indent",
            "text": "level=logging.INFO,",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 333
      },
      "code_metrics": {
        "line_count": 333,
        "empty_lines": 54,
        "comment_lines": 13,
        "function_count": 20,
        "class_count": 1,
        "import_count": 8,
        "complexity_indicators": {
          "nested_functions": 15,
          "try_except_blocks": 14,
          "long_lines": 1,
          "deep_nesting": 6
        },
        "complexity_score": 5.3100000000000005
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "simple_arrow_syntax_fixer.py": {
      "filepath": "simple_arrow_syntax_fixer.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 130,
            "message": "unmatched ')'",
            "text": ")",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 153
      },
      "code_metrics": {
        "line_count": 153,
        "empty_lines": 38,
        "comment_lines": 9,
        "function_count": 6,
        "class_count": 1,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 5,
          "try_except_blocks": 2,
          "long_lines": 2,
          "deep_nesting": 2
        },
        "complexity_score": 1.52
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "tools"
    },
    "simple_test.py": {
      "filepath": "simple_test.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 36
      },
      "code_metrics": {
        "line_count": 36,
        "empty_lines": 10,
        "comment_lines": 7,
        "function_count": 0,
        "class_count": 0,
        "import_count": 2,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.1
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "simple_text_cleaner.py": {
      "filepath": "simple_text_cleaner.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 116
      },
      "code_metrics": {
        "line_count": 116,
        "empty_lines": 26,
        "comment_lines": 14,
        "function_count": 2,
        "class_count": 0,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.1
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "surgical_syntax_fixer_v2.py": {
      "filepath": "surgical_syntax_fixer_v2.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 289,
            "message": "invalid character '🔍' (U+1F50D)",
            "text": "🔍 SURGICAL SYNTAX FIXER V2 - ANALYSIS REPORT",
            "type": "other_error"
          }
        ],
        "severity_score": 5,
        "error_types": [
          "other_error"
        ],
        "line_count": 383
      },
      "code_metrics": {
        "line_count": 383,
        "empty_lines": 63,
        "comment_lines": 10,
        "function_count": 11,
        "class_count": 2,
        "import_count": 8,
        "complexity_indicators": {
          "nested_functions": 10,
          "try_except_blocks": 5,
          "long_lines": 1,
          "deep_nesting": 135
        },
        "complexity_score": 10
      },
      "fixability_score": 8,
      "severity_score": 5,
      "category": "tools"
    },
    "surgical_syntax_fixer_v3.py": {
      "filepath": "surgical_syntax_fixer_v3.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 678
      },
      "code_metrics": {
        "line_count": 678,
        "empty_lines": 112,
        "comment_lines": 25,
        "function_count": 12,
        "class_count": 1,
        "import_count": 8,
        "complexity_indicators": {
          "nested_functions": 11,
          "try_except_blocks": 6,
          "long_lines": 2,
          "deep_nesting": 247
        },
        "complexity_score": 10
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "tools"
    },
    "surgical_syntax_repair.py": {
      "filepath": "surgical_syntax_repair.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 162,
            "message": "invalid syntax. Perhaps you forgot a comma?",
            "text": "print(f\"  ✅ Applied {fixes safe fixes}\")",
            "type": "syntax_error"
          }
        ],
        "severity_score": 6,
        "error_types": [
          "syntax_error"
        ],
        "line_count": 185
      },
      "code_metrics": {
        "line_count": 185,
        "empty_lines": 42,
        "comment_lines": 11,
        "function_count": 8,
        "class_count": 0,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 3,
          "long_lines": 1,
          "deep_nesting": 1
        },
        "complexity_score": 0.45999999999999996
      },
      "fixability_score": 7,
      "severity_score": 6,
      "category": "tools"
    },
    "syllable_accomplishments.py": {
      "filepath": "syllable_accomplishments.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 146
      },
      "code_metrics": {
        "line_count": 146,
        "empty_lines": 24,
        "comment_lines": 7,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "syllable_encoder.py": {
      "filepath": "syllable_encoder.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 146
      },
      "code_metrics": {
        "line_count": 146,
        "empty_lines": 31,
        "comment_lines": 7,
        "function_count": 5,
        "class_count": 0,
        "import_count": 1,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "syllable_mission_accomplished.py": {
      "filepath": "syllable_mission_accomplished.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 86,
            "message": "unexpected indent",
            "text": "f\"   📊 Vector dimensions: {analysis.final_analysis.get('final_vector_dimensions', 0)}\"",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 201
      },
      "code_metrics": {
        "line_count": 201,
        "empty_lines": 34,
        "comment_lines": 10,
        "function_count": 2,
        "class_count": 0,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 1,
          "deep_nesting": 2
        },
        "complexity_score": 0.31
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "syllable_model.py": {
      "filepath": "syllable_model.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 182,
            "message": "unmatched ')'",
            "text": "has_gemination=data.get(\"has_gemination\", False))",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 326
      },
      "code_metrics": {
        "line_count": 326,
        "empty_lines": 60,
        "comment_lines": 12,
        "function_count": 26,
        "class_count": 6,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 26,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 5
        },
        "complexity_score": 5.95
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "syllable_phonological_engine.py": {
      "filepath": "syllable_phonological_engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 356
      },
      "code_metrics": {
        "line_count": 356,
        "empty_lines": 76,
        "comment_lines": 38,
        "function_count": 12,
        "class_count": 3,
        "import_count": 6,
        "complexity_indicators": {
          "nested_functions": 11,
          "try_except_blocks": 0,
          "long_lines": 1,
          "deep_nesting": 7
        },
        "complexity_score": 3.2600000000000002
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "targeted_critical_syntax_fixer.py": {
      "filepath": "targeted_critical_syntax_fixer.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 24,
            "message": "unterminated string literal (detected at line 24)",
            "text": "pattern1 = r'\"\"f\"([^\"]*)\"'\"",
            "type": "string_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "string_error"
        ],
        "line_count": 177
      },
      "code_metrics": {
        "line_count": 177,
        "empty_lines": 35,
        "comment_lines": 11,
        "function_count": 3,
        "class_count": 0,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 3
        },
        "complexity_score": 0.55
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "tools"
    },
    "test_all_fixed_engines.py": {
      "filepath": "test_all_fixed_engines.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 46,
            "message": "unexpected indent",
            "text": "f\"   📊 Result: {result.get('engine', 'Unknown')} processed successfully\"",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 211
      },
      "code_metrics": {
        "line_count": 211,
        "empty_lines": 34,
        "comment_lines": 17,
        "function_count": 2,
        "class_count": 0,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 2,
          "long_lines": 1,
          "deep_nesting": 10
        },
        "complexity_score": 1.7100000000000002
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "test_files"
    },
    "test_arabic_math_concepts.py": {
      "filepath": "test_arabic_math_concepts.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 60,
            "message": "unexpected indent",
            "text": "f\"   {number:3d} {gender_symbol}: {concept.term:15s} \"",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 616
      },
      "code_metrics": {
        "line_count": 616,
        "empty_lines": 135,
        "comment_lines": 30,
        "function_count": 8,
        "class_count": 0,
        "import_count": 7,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 14,
          "long_lines": 2,
          "deep_nesting": 53
        },
        "complexity_score": 9.370000000000001
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "test_files"
    },
    "test_morphological_weights.py": {
      "filepath": "test_morphological_weights.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 18,
            "message": "unmatched ')'",
            "text": "ArabicMorphologicalWeightGenerator)  # noqa: F401",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 74
      },
      "code_metrics": {
        "line_count": 74,
        "empty_lines": 15,
        "comment_lines": 13,
        "function_count": 0,
        "class_count": 0,
        "import_count": 2,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.1
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "test_files"
    },
    "test_phoneme_integration.py": {
      "filepath": "test_phoneme_integration.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 65
      },
      "code_metrics": {
        "line_count": 65,
        "empty_lines": 15,
        "comment_lines": 11,
        "function_count": 1,
        "class_count": 0,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 2,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.2
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "test_phoneme_simple.py": {
      "filepath": "test_phoneme_simple.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 38
      },
      "code_metrics": {
        "line_count": 38,
        "empty_lines": 9,
        "comment_lines": 7,
        "function_count": 1,
        "class_count": 0,
        "import_count": 1,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.1
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "test_proper_names_examples.py": {
      "filepath": "test_proper_names_examples.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 36,
            "message": "unexpected indent",
            "text": "f\"   {i}. {name.name:15} | جودة: {name.authenticity_score:.2f} | {name.semantic_meaning}\"",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 221
      },
      "code_metrics": {
        "line_count": 221,
        "empty_lines": 52,
        "comment_lines": 17,
        "function_count": 5,
        "class_count": 0,
        "import_count": 1,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 2,
          "deep_nesting": 2
        },
        "complexity_score": 0.32
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "test_files"
    },
    "test_syllable_engine.py": {
      "filepath": "test_syllable_engine.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 67,
            "message": "unexpected indent",
            "text": "f\"    SyllabicUnits: {' - '.join(analysis['syllabic_units'])}\"",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 158
      },
      "code_metrics": {
        "line_count": 158,
        "empty_lines": 34,
        "comment_lines": 14,
        "function_count": 2,
        "class_count": 0,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 3,
          "long_lines": 1,
          "deep_nesting": 20
        },
        "complexity_score": 3.31
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "test_files"
    },
    "test_syllable_generator.py": {
      "filepath": "test_syllable_generator.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 31,
            "message": "invalid syntax. Perhaps you forgot a comma?",
            "text": "print(f\"✅ تم توليد {len(cvv_syllables) مقطع CVV}\")",
            "type": "syntax_error"
          }
        ],
        "severity_score": 6,
        "error_types": [
          "syntax_error"
        ],
        "line_count": 59
      },
      "code_metrics": {
        "line_count": 59,
        "empty_lines": 14,
        "comment_lines": 12,
        "function_count": 0,
        "class_count": 0,
        "import_count": 2,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.1
      },
      "fixability_score": 7,
      "severity_score": 6,
      "category": "test_files"
    },
    "test_syllable_readiness.py": {
      "filepath": "test_syllable_readiness.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 20,
            "message": "unmatched ')'",
            "text": "PurePhonologicalSyllableEngine)  # noqa: F401",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 42
      },
      "code_metrics": {
        "line_count": 42,
        "empty_lines": 11,
        "comment_lines": 6,
        "function_count": 0,
        "class_count": 0,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.1
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "test_files"
    },
    "test_waw_hamza.py": {
      "filepath": "test_waw_hamza.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 43,
            "message": "unterminated string literal (detected at line 43)",
            "text": "print(f\"✅ '{word':}\")",
            "type": "string_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "string_error"
        ],
        "line_count": 66
      },
      "code_metrics": {
        "line_count": 66,
        "empty_lines": 15,
        "comment_lines": 8,
        "function_count": 1,
        "class_count": 0,
        "import_count": 1,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 6
        },
        "complexity_score": 1.0
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "test_files"
    },
    "test_word.py": {
      "filepath": "test_word.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 117
      },
      "code_metrics": {
        "line_count": 117,
        "empty_lines": 28,
        "comment_lines": 14,
        "function_count": 1,
        "class_count": 0,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 2,
          "long_lines": 1,
          "deep_nesting": 6
        },
        "complexity_score": 1.1099999999999999
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "test_zero_layer_comprehensive.py": {
      "filepath": "test_zero_layer_comprehensive.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 29,
            "message": "unmatched ')'",
            "text": "HarakaClassification)  # noqa: F401",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 469
      },
      "code_metrics": {
        "line_count": 469,
        "empty_lines": 81,
        "comment_lines": 28,
        "function_count": 9,
        "class_count": 1,
        "import_count": 6,
        "complexity_indicators": {
          "nested_functions": 8,
          "try_except_blocks": 5,
          "long_lines": 4,
          "deep_nesting": 103
        },
        "complexity_score": 10
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "test_files"
    },
    "toggle_error_squiggles.py": {
      "filepath": "toggle_error_squiggles.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 6
      },
      "code_metrics": {
        "line_count": 6,
        "empty_lines": 1,
        "comment_lines": 5,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "ultimate_syntax_fix.py": {
      "filepath": "ultimate_syntax_fix.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 26,
            "message": "unexpected indent",
            "text": "r'\\bfrom\\s+([^\\s]+)\\s+import\\s+', r'from \\1 import ', content",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 369
      },
      "code_metrics": {
        "line_count": 369,
        "empty_lines": 60,
        "comment_lines": 26,
        "function_count": 6,
        "class_count": 0,
        "import_count": 5,
        "complexity_indicators": {
          "nested_functions": 2,
          "try_except_blocks": 5,
          "long_lines": 0,
          "deep_nesting": 8
        },
        "complexity_score": 2.1
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "ultimate_violation_eliminator.py": {
      "filepath": "ultimate_violation_eliminator.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 65,
            "message": "closing parenthesis '}' does not match opening parenthesis '[' on line 63",
            "text": "(r'logger\\.info\\(f\"([^{]*?)}\"\\)', r'logger.info(\"\\1\")'), }",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 546
      },
      "code_metrics": {
        "line_count": 546,
        "empty_lines": 117,
        "comment_lines": 89,
        "function_count": 16,
        "class_count": 1,
        "import_count": 5,
        "complexity_indicators": {
          "nested_functions": 15,
          "try_except_blocks": 1,
          "long_lines": 9,
          "deep_nesting": 18
        },
        "complexity_score": 5.89
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "tools"
    },
    "ultimate_winsurf_eliminator.py": {
      "filepath": "ultimate_winsurf_eliminator.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 85,
            "message": "closing parenthesis ')' does not match opening parenthesis '[' on line 78",
            "text": "is_regex=True),",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 568
      },
      "code_metrics": {
        "line_count": 568,
        "empty_lines": 88,
        "comment_lines": 44,
        "function_count": 13,
        "class_count": 3,
        "import_count": 10,
        "complexity_indicators": {
          "nested_functions": 12,
          "try_except_blocks": 2,
          "long_lines": 2,
          "deep_nesting": 8
        },
        "complexity_score": 3.8200000000000003
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "tools"
    },
    "unified_arabic_engine.py": {
      "filepath": "unified_arabic_engine.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 27,
            "message": "unmatched ')'",
            "text": "is_emphatic)",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 1296
      },
      "code_metrics": {
        "line_count": 1296,
        "empty_lines": 230,
        "comment_lines": 107,
        "function_count": 61,
        "class_count": 2,
        "import_count": 6,
        "complexity_indicators": {
          "nested_functions": 60,
          "try_except_blocks": 9,
          "long_lines": 1,
          "deep_nesting": 48
        },
        "complexity_score": 10
      },
      "fixability_score": 7,
      "severity_score": 4,
      "category": "experimental"
    },
    "unified_phonemes.py": {
      "filepath": "unified_phonemes.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 567
      },
      "code_metrics": {
        "line_count": 567,
        "empty_lines": 63,
        "comment_lines": 28,
        "function_count": 19,
        "class_count": 5,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 14,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 3
        },
        "complexity_score": 3.25
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "utf8_encoding_fixer.py": {
      "filepath": "utf8_encoding_fixer.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 347
      },
      "code_metrics": {
        "line_count": 347,
        "empty_lines": 67,
        "comment_lines": 37,
        "function_count": 12,
        "class_count": 1,
        "import_count": 7,
        "complexity_indicators": {
          "nested_functions": 11,
          "try_except_blocks": 4,
          "long_lines": 3,
          "deep_nesting": 7
        },
        "complexity_score": 3.6799999999999997
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "tools"
    },
    "utf8_terminal_cleaner.py": {
      "filepath": "utf8_terminal_cleaner.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 161
      },
      "code_metrics": {
        "line_count": 161,
        "empty_lines": 40,
        "comment_lines": 22,
        "function_count": 1,
        "class_count": 0,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 2,
          "long_lines": 2,
          "deep_nesting": 0
        },
        "complexity_score": 0.22000000000000003
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "validate_citations.py": {
      "filepath": "validate_citations.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 83,
            "message": "invalid syntax. Perhaps you forgot a comma?",
            "text": "self.errors.append(f\"Author {i+1 missing family names}\")",
            "type": "syntax_error"
          }
        ],
        "severity_score": 6,
        "error_types": [
          "syntax_error"
        ],
        "line_count": 378
      },
      "code_metrics": {
        "line_count": 378,
        "empty_lines": 89,
        "comment_lines": 73,
        "function_count": 10,
        "class_count": 1,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 9,
          "try_except_blocks": 3,
          "long_lines": 4,
          "deep_nesting": 14
        },
        "complexity_score": 4.24
      },
      "fixability_score": 7,
      "severity_score": 6,
      "category": "experimental"
    },
    "verify_error_suppression.py": {
      "filepath": "verify_error_suppression.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 6
      },
      "code_metrics": {
        "line_count": 6,
        "empty_lines": 1,
        "comment_lines": 5,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "verify_string_fixes.py": {
      "filepath": "verify_string_fixes.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 59
      },
      "code_metrics": {
        "line_count": 59,
        "empty_lines": 11,
        "comment_lines": 2,
        "function_count": 1,
        "class_count": 0,
        "import_count": 2,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 4
        },
        "complexity_score": 0.7
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "violation_elimination_system.py": {
      "filepath": "violation_elimination_system.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 156
      },
      "code_metrics": {
        "line_count": 156,
        "empty_lines": 40,
        "comment_lines": 31,
        "function_count": 5,
        "class_count": 1,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 4,
          "try_except_blocks": 1,
          "long_lines": 2,
          "deep_nesting": 2
        },
        "complexity_score": 1.22
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "winsurf_standards_library.py": {
      "filepath": "winsurf_standards_library.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 114,
            "message": "closing parenthesis ')' does not match opening parenthesis '{' on line 106",
            "text": "),",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 652
      },
      "code_metrics": {
        "line_count": 652,
        "empty_lines": 137,
        "comment_lines": 91,
        "function_count": 16,
        "class_count": 5,
        "import_count": 7,
        "complexity_indicators": {
          "nested_functions": 14,
          "try_except_blocks": 1,
          "long_lines": 2,
          "deep_nesting": 1
        },
        "complexity_score": 3.07
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "winsurf_verification_system.py": {
      "filepath": "winsurf_verification_system.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 32,
            "message": "unexpected indent",
            "text": "level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s'",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 386
      },
      "code_metrics": {
        "line_count": 386,
        "empty_lines": 60,
        "comment_lines": 15,
        "function_count": 7,
        "class_count": 1,
        "import_count": 5,
        "complexity_indicators": {
          "nested_functions": 6,
          "try_except_blocks": 4,
          "long_lines": 2,
          "deep_nesting": 75
        },
        "complexity_score": 10
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "xampp_arabic_phonology.py": {
      "filepath": "xampp_arabic_phonology.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 113
      },
      "code_metrics": {
        "line_count": 113,
        "empty_lines": 18,
        "comment_lines": 7,
        "function_count": 4,
        "class_count": 0,
        "import_count": 8,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 2,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.2
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "xampp_test_phonemes_matrix.py": {
      "filepath": "xampp_test_phonemes_matrix.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 257
      },
      "code_metrics": {
        "line_count": 257,
        "empty_lines": 57,
        "comment_lines": 25,
        "function_count": 13,
        "class_count": 5,
        "import_count": 6,
        "complexity_indicators": {
          "nested_functions": 11,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 3
        },
        "complexity_score": 2.65
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "yellow_line_eliminator.py": {
      "filepath": "yellow_line_eliminator.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 32,
            "message": "unexpected indent",
            "text": "level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s'",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 353
      },
      "code_metrics": {
        "line_count": 353,
        "empty_lines": 60,
        "comment_lines": 32,
        "function_count": 9,
        "class_count": 1,
        "import_count": 5,
        "complexity_indicators": {
          "nested_functions": 7,
          "try_except_blocks": 1,
          "long_lines": 4,
          "deep_nesting": 10
        },
        "complexity_score": 3.04
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "tools"
    },
    "zero_layer_phonology.py": {
      "filepath": "zero_layer_phonology.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 154,
            "message": "unexpected indent",
            "text": "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 634
      },
      "code_metrics": {
        "line_count": 634,
        "empty_lines": 112,
        "comment_lines": 50,
        "function_count": 22,
        "class_count": 5,
        "import_count": 6,
        "complexity_indicators": {
          "nested_functions": 21,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 11
        },
        "complexity_score": 5.85
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "__init__.py": {
      "filepath": "__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 33
      },
      "code_metrics": {
        "line_count": 33,
        "empty_lines": 6,
        "comment_lines": 15,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "core\\base_engine.py": {
      "filepath": "core\\base_engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 210
      },
      "code_metrics": {
        "line_count": 210,
        "empty_lines": 51,
        "comment_lines": 38,
        "function_count": 10,
        "class_count": 1,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 10,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 2.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "core\\config.py": {
      "filepath": "core\\config.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 173
      },
      "code_metrics": {
        "line_count": 173,
        "empty_lines": 43,
        "comment_lines": 35,
        "function_count": 0,
        "class_count": 7,
        "import_count": 1,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "core\\__init__.py": {
      "filepath": "core\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 28
      },
      "code_metrics": {
        "line_count": 28,
        "empty_lines": 7,
        "comment_lines": 6,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "nlp\\advanced_arabic_engine.py": {
      "filepath": "nlp\\advanced_arabic_engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 24
      },
      "code_metrics": {
        "line_count": 24,
        "empty_lines": 4,
        "comment_lines": 10,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "nlp\\base_engine.py": {
      "filepath": "nlp\\base_engine.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 582,
            "message": "unmatched ')'",
            "text": ")",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 991
      },
      "code_metrics": {
        "line_count": 991,
        "empty_lines": 194,
        "comment_lines": 96,
        "function_count": 39,
        "class_count": 3,
        "import_count": 14,
        "complexity_indicators": {
          "nested_functions": 38,
          "try_except_blocks": 7,
          "long_lines": 16,
          "deep_nesting": 55
        },
        "complexity_score": 10
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "nlp\\machine_learning_engine.py": {
      "filepath": "nlp\\machine_learning_engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 24
      },
      "code_metrics": {
        "line_count": 24,
        "empty_lines": 4,
        "comment_lines": 10,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "nlp\\__init__.py": {
      "filepath": "nlp\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 35
      },
      "code_metrics": {
        "line_count": 35,
        "empty_lines": 6,
        "comment_lines": 15,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "nlp\\derivation\\engine.py": {
      "filepath": "nlp\\derivation\\engine.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 122,
            "message": "unexpected indent",
            "text": "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 567
      },
      "code_metrics": {
        "line_count": 567,
        "empty_lines": 103,
        "comment_lines": 43,
        "function_count": 21,
        "class_count": 2,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 19,
          "try_except_blocks": 3,
          "long_lines": 0,
          "deep_nesting": 25
        },
        "complexity_score": 7.85
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "nlp\\derivation\\__init__.py": {
      "filepath": "nlp\\derivation\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 35,
            "message": "unmatched ')'",
            "text": "embed_pattern)  # noqa: F401",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 219
      },
      "code_metrics": {
        "line_count": 219,
        "empty_lines": 54,
        "comment_lines": 45,
        "function_count": 6,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 1,
          "long_lines": 1,
          "deep_nesting": 0
        },
        "complexity_score": 0.11000000000000001
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "nlp\\derivation\\models\\comparative.py": {
      "filepath": "nlp\\derivation\\models\\comparative.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 107,
            "message": "unexpected indent",
            "text": "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 596
      },
      "code_metrics": {
        "line_count": 596,
        "empty_lines": 133,
        "comment_lines": 114,
        "function_count": 22,
        "class_count": 3,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 20,
          "try_except_blocks": 4,
          "long_lines": 1,
          "deep_nesting": 12
        },
        "complexity_score": 6.21
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "nlp\\derivation\\models\\derive.py": {
      "filepath": "nlp\\derivation\\models\\derive.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 52,
            "message": "unexpected indent",
            "text": "f\"Confidence must be between 0 and 1, got {self.confidence}\"",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 922
      },
      "code_metrics": {
        "line_count": 922,
        "empty_lines": 152,
        "comment_lines": 181,
        "function_count": 26,
        "class_count": 2,
        "import_count": 6,
        "complexity_indicators": {
          "nested_functions": 25,
          "try_except_blocks": 6,
          "long_lines": 2,
          "deep_nesting": 63
        },
        "complexity_score": 10
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "nlp\\derivation\\models\\pattern_embed.py": {
      "filepath": "nlp\\derivation\\models\\pattern_embed.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 714
      },
      "code_metrics": {
        "line_count": 714,
        "empty_lines": 138,
        "comment_lines": 126,
        "function_count": 25,
        "class_count": 2,
        "import_count": 6,
        "complexity_indicators": {
          "nested_functions": 24,
          "try_except_blocks": 4,
          "long_lines": 0,
          "deep_nesting": 10
        },
        "complexity_score": 6.7
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "nlp\\derivation\\models\\root_embed.py": {
      "filepath": "nlp\\derivation\\models\\root_embed.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 92,
            "message": "unmatched ')'",
            "text": ")  # noqa: E501",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 476
      },
      "code_metrics": {
        "line_count": 476,
        "empty_lines": 90,
        "comment_lines": 84,
        "function_count": 16,
        "class_count": 2,
        "import_count": 5,
        "complexity_indicators": {
          "nested_functions": 15,
          "try_except_blocks": 3,
          "long_lines": 0,
          "deep_nesting": 6
        },
        "complexity_score": 4.2
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "nlp\\derivation\\models\\__init__.py": {
      "filepath": "nlp\\derivation\\models\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 31
      },
      "code_metrics": {
        "line_count": 31,
        "empty_lines": 6,
        "comment_lines": 15,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "nlp\\frozen_root\\engine.py": {
      "filepath": "nlp\\frozen_root\\engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 701
      },
      "code_metrics": {
        "line_count": 701,
        "empty_lines": 74,
        "comment_lines": 32,
        "function_count": 22,
        "class_count": 2,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 22,
          "try_except_blocks": 3,
          "long_lines": 1,
          "deep_nesting": 26
        },
        "complexity_score": 8.61
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "nlp\\frozen_root\\engine_new.py": {
      "filepath": "nlp\\frozen_root\\engine_new.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 624
      },
      "code_metrics": {
        "line_count": 624,
        "empty_lines": 68,
        "comment_lines": 32,
        "function_count": 22,
        "class_count": 2,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 22,
          "try_except_blocks": 2,
          "long_lines": 1,
          "deep_nesting": 25
        },
        "complexity_score": 8.36
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "nlp\\frozen_root\\__init__.py": {
      "filepath": "nlp\\frozen_root\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 149
      },
      "code_metrics": {
        "line_count": 149,
        "empty_lines": 25,
        "comment_lines": 30,
        "function_count": 3,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "nlp\\frozen_root\\models\\classifier.py": {
      "filepath": "nlp\\frozen_root\\models\\classifier.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 109,
            "message": "unexpected indent",
            "text": "self.syllabic_unit_analyzer.analyze_syllabic_unit_structure(cleaned_word)",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 478
      },
      "code_metrics": {
        "line_count": 478,
        "empty_lines": 101,
        "comment_lines": 88,
        "function_count": 17,
        "class_count": 1,
        "import_count": 6,
        "complexity_indicators": {
          "nested_functions": 14,
          "try_except_blocks": 2,
          "long_lines": 0,
          "deep_nesting": 11
        },
        "complexity_score": 4.65
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "nlp\\frozen_root\\models\\syllable_check.py": {
      "filepath": "nlp\\frozen_root\\models\\syllable_check.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 178,
            "message": "unmatched ')'",
            "text": "):",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 357
      },
      "code_metrics": {
        "line_count": 357,
        "empty_lines": 77,
        "comment_lines": 66,
        "function_count": 12,
        "class_count": 1,
        "import_count": 2,
        "complexity_indicators": {
          "nested_functions": 10,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 1
        },
        "complexity_score": 2.15
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "nlp\\frozen_root\\models\\verb_check.py": {
      "filepath": "nlp\\frozen_root\\models\\verb_check.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 182,
            "message": "closing parenthesis ')' does not match opening parenthesis '{' on line 172",
            "text": "),",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 361
      },
      "code_metrics": {
        "line_count": 361,
        "empty_lines": 65,
        "comment_lines": 54,
        "function_count": 10,
        "class_count": 1,
        "import_count": 2,
        "complexity_indicators": {
          "nested_functions": 7,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 7
        },
        "complexity_score": 2.45
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "nlp\\frozen_root\\models\\__init__.py": {
      "filepath": "nlp\\frozen_root\\models\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 64
      },
      "code_metrics": {
        "line_count": 64,
        "empty_lines": 9,
        "comment_lines": 10,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "nlp\\full_pipeline\\engine.py": {
      "filepath": "nlp\\full_pipeline\\engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 123
      },
      "code_metrics": {
        "line_count": 123,
        "empty_lines": 27,
        "comment_lines": 7,
        "function_count": 8,
        "class_count": 1,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 7,
          "try_except_blocks": 2,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 1.6
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "nlp\\full_pipeline\\__init__.py": {
      "filepath": "nlp\\full_pipeline\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 41
      },
      "code_metrics": {
        "line_count": 41,
        "empty_lines": 9,
        "comment_lines": 14,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "nlp\\grammatical_particles\\engine.py": {
      "filepath": "nlp\\grammatical_particles\\engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 81
      },
      "code_metrics": {
        "line_count": 81,
        "empty_lines": 16,
        "comment_lines": 6,
        "function_count": 5,
        "class_count": 1,
        "import_count": 2,
        "complexity_indicators": {
          "nested_functions": 5,
          "try_except_blocks": 1,
          "long_lines": 1,
          "deep_nesting": 0
        },
        "complexity_score": 1.1099999999999999
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "nlp\\grammatical_particles\\__init__.py": {
      "filepath": "nlp\\grammatical_particles\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 34
      },
      "code_metrics": {
        "line_count": 34,
        "empty_lines": 8,
        "comment_lines": 10,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "nlp\\inflection\\engine.py": {
      "filepath": "nlp\\inflection\\engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 129
      },
      "code_metrics": {
        "line_count": 129,
        "empty_lines": 24,
        "comment_lines": 7,
        "function_count": 7,
        "class_count": 2,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 7,
          "try_except_blocks": 2,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 1.6
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "nlp\\inflection\\__init__.py": {
      "filepath": "nlp\\inflection\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 30
      },
      "code_metrics": {
        "line_count": 30,
        "empty_lines": 7,
        "comment_lines": 11,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "nlp\\inflection\\models\\feature_space.py": {
      "filepath": "nlp\\inflection\\models\\feature_space.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 130,
            "message": "unterminated string literal (detected at line 130)",
            "text": "\"\"\"Initialize the feature space mapperf\"",
            "type": "string_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "string_error"
        ],
        "line_count": 590
      },
      "code_metrics": {
        "line_count": 590,
        "empty_lines": 128,
        "comment_lines": 95,
        "function_count": 18,
        "class_count": 6,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 15,
          "try_except_blocks": 5,
          "long_lines": 3,
          "deep_nesting": 4
        },
        "complexity_score": 4.13
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "nlp\\inflection\\models\\inflect.py": {
      "filepath": "nlp\\inflection\\models\\inflect.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 111,
            "message": "invalid syntax",
            "text": "Process apply_inflection operation",
            "type": "syntax_error"
          }
        ],
        "severity_score": 6,
        "error_types": [
          "syntax_error"
        ],
        "line_count": 559
      },
      "code_metrics": {
        "line_count": 559,
        "empty_lines": 124,
        "comment_lines": 79,
        "function_count": 13,
        "class_count": 2,
        "import_count": 5,
        "complexity_indicators": {
          "nested_functions": 11,
          "try_except_blocks": 8,
          "long_lines": 7,
          "deep_nesting": 8
        },
        "complexity_score": 4.2700000000000005
      },
      "fixability_score": 7,
      "severity_score": 6,
      "category": "experimental"
    },
    "nlp\\inflection\\models\\__init__.py": {
      "filepath": "nlp\\inflection\\models\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 29
      },
      "code_metrics": {
        "line_count": 29,
        "empty_lines": 5,
        "comment_lines": 11,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "nlp\\morphology\\engine.py": {
      "filepath": "nlp\\morphology\\engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 76
      },
      "code_metrics": {
        "line_count": 76,
        "empty_lines": 15,
        "comment_lines": 6,
        "function_count": 4,
        "class_count": 1,
        "import_count": 2,
        "complexity_indicators": {
          "nested_functions": 4,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.9
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "nlp\\morphology\\config\\settings.py": {
      "filepath": "nlp\\morphology\\config\\settings.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 490
      },
      "code_metrics": {
        "line_count": 490,
        "empty_lines": 19,
        "comment_lines": 30,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 3,
          "deep_nesting": 0
        },
        "complexity_score": 0.030000000000000006
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "nlp\\morphology\\models\\morphological_models.py": {
      "filepath": "nlp\\morphology\\models\\morphological_models.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 135,
            "message": "invalid syntax",
            "text": "\"\"\"Represents a morphological pattern (wazn)\"\"\"",
            "type": "syntax_error"
          }
        ],
        "severity_score": 6,
        "error_types": [
          "syntax_error"
        ],
        "line_count": 926
      },
      "code_metrics": {
        "line_count": 926,
        "empty_lines": 214,
        "comment_lines": 204,
        "function_count": 32,
        "class_count": 10,
        "import_count": 11,
        "complexity_indicators": {
          "nested_functions": 32,
          "try_except_blocks": 2,
          "long_lines": 7,
          "deep_nesting": 84
        },
        "complexity_score": 10
      },
      "fixability_score": 7,
      "severity_score": 6,
      "category": "experimental"
    },
    "nlp\\particles\\engine.py": {
      "filepath": "nlp\\particles\\engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 80
      },
      "code_metrics": {
        "line_count": 80,
        "empty_lines": 16,
        "comment_lines": 6,
        "function_count": 5,
        "class_count": 1,
        "import_count": 2,
        "complexity_indicators": {
          "nested_functions": 5,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 1.1
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "nlp\\particles\\models\\particle_classify.py": {
      "filepath": "nlp\\particles\\models\\particle_classify.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 115,
            "message": "unterminated string literal (detected at line 115)",
            "text": "\"\"\"Process context sensitive particle classificationf\"",
            "type": "string_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "string_error"
        ],
        "line_count": 171
      },
      "code_metrics": {
        "line_count": 171,
        "empty_lines": 44,
        "comment_lines": 40,
        "function_count": 8,
        "class_count": 1,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 8,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 1.7
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "nlp\\particles\\models\\particle_segment.py": {
      "filepath": "nlp\\particles\\models\\particle_segment.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 38,
            "message": "unexpected indent",
            "text": "Enterprise grade Arabic grammatical particles phoneme and syllabic_unit segmentation",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 304
      },
      "code_metrics": {
        "line_count": 304,
        "empty_lines": 74,
        "comment_lines": 55,
        "function_count": 12,
        "class_count": 1,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 10,
          "try_except_blocks": 2,
          "long_lines": 4,
          "deep_nesting": 4
        },
        "complexity_score": 2.84
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "nlp\\phoneme\\engine.py": {
      "filepath": "nlp\\phoneme\\engine.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 104,
            "message": "unexpected indent",
            "text": "\" Arabic PhonemeEngine initialized successfully with 3 sector classification\"",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 408
      },
      "code_metrics": {
        "line_count": 408,
        "empty_lines": 57,
        "comment_lines": 26,
        "function_count": 8,
        "class_count": 1,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 8,
          "try_except_blocks": 2,
          "long_lines": 1,
          "deep_nesting": 46
        },
        "complexity_score": 8.709999999999999
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "nlp\\phoneme\\__init__.py": {
      "filepath": "nlp\\phoneme\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 14,
            "message": "invalid syntax",
            "text": "from .engine from unified_phonemes import get_unified_phonemes, extract_phonemes, get_phonetic_features, is_emphatic",
            "type": "syntax_error"
          }
        ],
        "severity_score": 6,
        "error_types": [
          "syntax_error"
        ],
        "line_count": 25
      },
      "code_metrics": {
        "line_count": 25,
        "empty_lines": 6,
        "comment_lines": 10,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 1,
          "deep_nesting": 0
        },
        "complexity_score": 0.01
      },
      "fixability_score": 7,
      "severity_score": 6,
      "category": "dead_code"
    },
    "nlp\\phoneme_advanced\\engine.py": {
      "filepath": "nlp\\phoneme_advanced\\engine.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 41,
            "message": "unmatched ')'",
            "text": ")",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 445
      },
      "code_metrics": {
        "line_count": 445,
        "empty_lines": 87,
        "comment_lines": 72,
        "function_count": 13,
        "class_count": 2,
        "import_count": 8,
        "complexity_indicators": {
          "nested_functions": 13,
          "try_except_blocks": 2,
          "long_lines": 11,
          "deep_nesting": 46
        },
        "complexity_score": 9.809999999999999
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "nlp\\phonological\\api.py": {
      "filepath": "nlp\\phonological\\api.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 64,
            "message": "unexpected indent",
            "text": "jsonify()",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 428
      },
      "code_metrics": {
        "line_count": 428,
        "empty_lines": 79,
        "comment_lines": 40,
        "function_count": 7,
        "class_count": 0,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 1,
          "try_except_blocks": 6,
          "long_lines": 0,
          "deep_nesting": 56
        },
        "complexity_score": 9.2
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "nlp\\phonological\\engine.py": {
      "filepath": "nlp\\phonological\\engine.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 147,
            "message": "unexpected indent",
            "text": "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 789
      },
      "code_metrics": {
        "line_count": 789,
        "empty_lines": 112,
        "comment_lines": 46,
        "function_count": 40,
        "class_count": 1,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 40,
          "try_except_blocks": 2,
          "long_lines": 0,
          "deep_nesting": 58
        },
        "complexity_score": 10
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "nlp\\phonological\\engine_old.py": {
      "filepath": "nlp\\phonological\\engine_old.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 36,
            "message": "invalid syntax",
            "text": "Implements mathematical framework for phonological rule application",
            "type": "syntax_error"
          }
        ],
        "severity_score": 6,
        "error_types": [
          "syntax_error"
        ],
        "line_count": 404
      },
      "code_metrics": {
        "line_count": 404,
        "empty_lines": 96,
        "comment_lines": 65,
        "function_count": 14,
        "class_count": 1,
        "import_count": 5,
        "complexity_indicators": {
          "nested_functions": 14,
          "try_except_blocks": 3,
          "long_lines": 6,
          "deep_nesting": 24
        },
        "complexity_score": 6.76
      },
      "fixability_score": 7,
      "severity_score": 6,
      "category": "experimental"
    },
    "nlp\\phonological\\engine_professional.py": {
      "filepath": "nlp\\phonological\\engine_professional.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 24
      },
      "code_metrics": {
        "line_count": 24,
        "empty_lines": 4,
        "comment_lines": 10,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "nlp\\phonological\\__init__.py": {
      "filepath": "nlp\\phonological\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 41
      },
      "code_metrics": {
        "line_count": 41,
        "empty_lines": 7,
        "comment_lines": 14,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "nlp\\phonological\\models\\assimilation.py": {
      "filepath": "nlp\\phonological\\models\\assimilation.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 78,
            "message": "unmatched ')'",
            "text": ") -> List[str]:",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 231
      },
      "code_metrics": {
        "line_count": 231,
        "empty_lines": 43,
        "comment_lines": 43,
        "function_count": 6,
        "class_count": 1,
        "import_count": 1,
        "complexity_indicators": {
          "nested_functions": 6,
          "try_except_blocks": 0,
          "long_lines": 1,
          "deep_nesting": 48
        },
        "complexity_score": 8.41
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "nlp\\phonological\\models\\deletion.py": {
      "filepath": "nlp\\phonological\\models\\deletion.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 291
      },
      "code_metrics": {
        "line_count": 291,
        "empty_lines": 60,
        "comment_lines": 65,
        "function_count": 8,
        "class_count": 1,
        "import_count": 1,
        "complexity_indicators": {
          "nested_functions": 8,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 29
        },
        "complexity_score": 5.95
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "nlp\\phonological\\models\\inversion.py": {
      "filepath": "nlp\\phonological\\models\\inversion.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 83,
            "message": "unmatched ')'",
            "text": ") -> List[str]:",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 312
      },
      "code_metrics": {
        "line_count": 312,
        "empty_lines": 57,
        "comment_lines": 68,
        "function_count": 10,
        "class_count": 1,
        "import_count": 1,
        "complexity_indicators": {
          "nested_functions": 10,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 19
        },
        "complexity_score": 4.85
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "nlp\\phonological\\models\\rule_base.py": {
      "filepath": "nlp\\phonological\\models\\rule_base.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 214
      },
      "code_metrics": {
        "line_count": 214,
        "empty_lines": 48,
        "comment_lines": 47,
        "function_count": 10,
        "class_count": 3,
        "import_count": 3,
        "complexity_indicators": {
          "nested_functions": 10,
          "try_except_blocks": 0,
          "long_lines": 1,
          "deep_nesting": 4
        },
        "complexity_score": 2.6100000000000003
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "nlp\\phonological\\models\\__init__.py": {
      "filepath": "nlp\\phonological\\models\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 31
      },
      "code_metrics": {
        "line_count": 31,
        "empty_lines": 5,
        "comment_lines": 10,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "nlp\\phonology\\engine.py": {
      "filepath": "nlp\\phonology\\engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 76
      },
      "code_metrics": {
        "line_count": 76,
        "empty_lines": 15,
        "comment_lines": 6,
        "function_count": 4,
        "class_count": 1,
        "import_count": 2,
        "complexity_indicators": {
          "nested_functions": 4,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.9
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "nlp\\phonology\\engine_clean.py": {
      "filepath": "nlp\\phonology\\engine_clean.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 70,
            "message": "unmatched ')'",
            "text": ")",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 498
      },
      "code_metrics": {
        "line_count": 498,
        "empty_lines": 111,
        "comment_lines": 97,
        "function_count": 18,
        "class_count": 1,
        "import_count": 5,
        "complexity_indicators": {
          "nested_functions": 18,
          "try_except_blocks": 2,
          "long_lines": 9,
          "deep_nesting": 16
        },
        "complexity_score": 6.29
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "experimental"
    },
    "nlp\\phonology\\config\\settings.py": {
      "filepath": "nlp\\phonology\\config\\settings.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 442
      },
      "code_metrics": {
        "line_count": 442,
        "empty_lines": 19,
        "comment_lines": 30,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "nlp\\syllable\\engine.py": {
      "filepath": "nlp\\syllable\\engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 695
      },
      "code_metrics": {
        "line_count": 695,
        "empty_lines": 110,
        "comment_lines": 59,
        "function_count": 25,
        "class_count": 3,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 25,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 55
        },
        "complexity_score": 10
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "nlp\\syllable\\engine_advanced.py": {
      "filepath": "nlp\\syllable\\engine_advanced.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 105,
            "message": "unexpected indent",
            "text": "'b',",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 644
      },
      "code_metrics": {
        "line_count": 644,
        "empty_lines": 112,
        "comment_lines": 61,
        "function_count": 21,
        "class_count": 4,
        "import_count": 8,
        "complexity_indicators": {
          "nested_functions": 21,
          "try_except_blocks": 1,
          "long_lines": 14,
          "deep_nesting": 33
        },
        "complexity_score": 9.39
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "nlp\\syllable\\__init__.py": {
      "filepath": "nlp\\syllable\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 40
      },
      "code_metrics": {
        "line_count": 40,
        "empty_lines": 7,
        "comment_lines": 14,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "nlp\\syllable\\models\\segmenter.py": {
      "filepath": "nlp\\syllable\\models\\segmenter.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 481
      },
      "code_metrics": {
        "line_count": 481,
        "empty_lines": 110,
        "comment_lines": 85,
        "function_count": 17,
        "class_count": 2,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 17,
          "try_except_blocks": 3,
          "long_lines": 3,
          "deep_nesting": 21
        },
        "complexity_score": 6.88
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "nlp\\syllable\\models\\templates.py": {
      "filepath": "nlp\\syllable\\models\\templates.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 100,
            "message": "unexpected indent",
            "text": "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'",
            "type": "indentation_error"
          }
        ],
        "severity_score": 2,
        "error_types": [
          "indentation_error"
        ],
        "line_count": 325
      },
      "code_metrics": {
        "line_count": 325,
        "empty_lines": 67,
        "comment_lines": 62,
        "function_count": 15,
        "class_count": 2,
        "import_count": 5,
        "complexity_indicators": {
          "nested_functions": 15,
          "try_except_blocks": 2,
          "long_lines": 2,
          "deep_nesting": 12
        },
        "complexity_score": 5.0200000000000005
      },
      "fixability_score": 9,
      "severity_score": 2,
      "category": "experimental"
    },
    "nlp\\syllable\\models\\__init__.py": {
      "filepath": "nlp\\syllable\\models\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 26
      },
      "code_metrics": {
        "line_count": 26,
        "empty_lines": 5,
        "comment_lines": 10,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "nlp\\weight\\engine.py": {
      "filepath": "nlp\\weight\\engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 76
      },
      "code_metrics": {
        "line_count": 76,
        "empty_lines": 15,
        "comment_lines": 6,
        "function_count": 4,
        "class_count": 1,
        "import_count": 2,
        "complexity_indicators": {
          "nested_functions": 4,
          "try_except_blocks": 1,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.9
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "nlp\\weight\\models\\analyzer.py": {
      "filepath": "nlp\\weight\\models\\analyzer.py",
      "syntax_analysis": {
        "syntax_valid": false,
        "errors": [
          {
            "line": 139,
            "message": "closing parenthesis ')' does not match opening parenthesis '{' on line 96",
            "text": ")",
            "type": "bracket_error"
          }
        ],
        "severity_score": 4,
        "error_types": [
          "bracket_error"
        ],
        "line_count": 787
      },
      "code_metrics": {
        "line_count": 787,
        "empty_lines": 161,
        "comment_lines": 115,
        "function_count": 24,
        "class_count": 2,
        "import_count": 7,
        "complexity_indicators": {
          "nested_functions": 21,
          "try_except_blocks": 4,
          "long_lines": 3,
          "deep_nesting": 49
        },
        "complexity_score": 10
      },
      "fixability_score": 8,
      "severity_score": 4,
      "category": "tools"
    },
    "tests\\conftest.py": {
      "filepath": "tests\\conftest.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 109
      },
      "code_metrics": {
        "line_count": 109,
        "empty_lines": 26,
        "comment_lines": 8,
        "function_count": 11,
        "class_count": 0,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "experimental"
    },
    "tests\\test_arabic_system.py": {
      "filepath": "tests\\test_arabic_system.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 111
      },
      "code_metrics": {
        "line_count": 111,
        "empty_lines": 30,
        "comment_lines": 8,
        "function_count": 8,
        "class_count": 0,
        "import_count": 1,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_hello_world.py": {
      "filepath": "tests\\test_hello_world.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 8
      },
      "code_metrics": {
        "line_count": 8,
        "empty_lines": 2,
        "comment_lines": 4,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_phoneme_processing.py": {
      "filepath": "tests\\test_phoneme_processing.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 121
      },
      "code_metrics": {
        "line_count": 121,
        "empty_lines": 24,
        "comment_lines": 9,
        "function_count": 8,
        "class_count": 1,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 8,
          "try_except_blocks": 0,
          "long_lines": 1,
          "deep_nesting": 0
        },
        "complexity_score": 1.61
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_syllable_processing.py": {
      "filepath": "tests\\test_syllable_processing.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 207
      },
      "code_metrics": {
        "line_count": 207,
        "empty_lines": 45,
        "comment_lines": 15,
        "function_count": 13,
        "class_count": 1,
        "import_count": 4,
        "complexity_indicators": {
          "nested_functions": 13,
          "try_except_blocks": 0,
          "long_lines": 3,
          "deep_nesting": 9
        },
        "complexity_score": 3.9799999999999995
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\__init__.py": {
      "filepath": "tests\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 4
      },
      "code_metrics": {
        "line_count": 4,
        "empty_lines": 0,
        "comment_lines": 4,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "dead_code"
    },
    "tests\\test_core\\test_base_engine.py": {
      "filepath": "tests\\test_core\\test_base_engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 12
      },
      "code_metrics": {
        "line_count": 12,
        "empty_lines": 4,
        "comment_lines": 4,
        "function_count": 2,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_core\\test_config.py": {
      "filepath": "tests\\test_core\\test_config.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 18
      },
      "code_metrics": {
        "line_count": 18,
        "empty_lines": 3,
        "comment_lines": 5,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_core\\__init__.py": {
      "filepath": "tests\\test_core\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 9
      },
      "code_metrics": {
        "line_count": 9,
        "empty_lines": 1,
        "comment_lines": 4,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_nlp\\__init__.py": {
      "filepath": "tests\\test_nlp\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 9
      },
      "code_metrics": {
        "line_count": 9,
        "empty_lines": 1,
        "comment_lines": 4,
        "function_count": 0,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_nlp\\test_derivation\\test_engine.py": {
      "filepath": "tests\\test_nlp\\test_derivation\\test_engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 8
      },
      "code_metrics": {
        "line_count": 8,
        "empty_lines": 2,
        "comment_lines": 4,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_nlp\\test_derivation\\__init__.py": {
      "filepath": "tests\\test_nlp\\test_derivation\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 8
      },
      "code_metrics": {
        "line_count": 8,
        "empty_lines": 2,
        "comment_lines": 4,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_nlp\\test_frozen_root\\test_engine.py": {
      "filepath": "tests\\test_nlp\\test_frozen_root\\test_engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 8
      },
      "code_metrics": {
        "line_count": 8,
        "empty_lines": 2,
        "comment_lines": 4,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_nlp\\test_frozen_root\\__init__.py": {
      "filepath": "tests\\test_nlp\\test_frozen_root\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 8
      },
      "code_metrics": {
        "line_count": 8,
        "empty_lines": 2,
        "comment_lines": 4,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_nlp\\test_inflection\\test_engine.py": {
      "filepath": "tests\\test_nlp\\test_inflection\\test_engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 8
      },
      "code_metrics": {
        "line_count": 8,
        "empty_lines": 2,
        "comment_lines": 4,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_nlp\\test_inflection\\__init__.py": {
      "filepath": "tests\\test_nlp\\test_inflection\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 8
      },
      "code_metrics": {
        "line_count": 8,
        "empty_lines": 2,
        "comment_lines": 4,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_nlp\\test_morphology\\test_engine.py": {
      "filepath": "tests\\test_nlp\\test_morphology\\test_engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 8
      },
      "code_metrics": {
        "line_count": 8,
        "empty_lines": 2,
        "comment_lines": 4,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_nlp\\test_morphology\\__init__.py": {
      "filepath": "tests\\test_nlp\\test_morphology\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 8
      },
      "code_metrics": {
        "line_count": 8,
        "empty_lines": 2,
        "comment_lines": 4,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_nlp\\test_phoneme\\test_engine.py": {
      "filepath": "tests\\test_nlp\\test_phoneme\\test_engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 8
      },
      "code_metrics": {
        "line_count": 8,
        "empty_lines": 2,
        "comment_lines": 4,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_nlp\\test_phoneme\\__init__.py": {
      "filepath": "tests\\test_nlp\\test_phoneme\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 8
      },
      "code_metrics": {
        "line_count": 8,
        "empty_lines": 2,
        "comment_lines": 4,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_nlp\\test_phonological\\test_engine.py": {
      "filepath": "tests\\test_nlp\\test_phonological\\test_engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 8
      },
      "code_metrics": {
        "line_count": 8,
        "empty_lines": 2,
        "comment_lines": 4,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_nlp\\test_phonological\\__init__.py": {
      "filepath": "tests\\test_nlp\\test_phonological\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 8
      },
      "code_metrics": {
        "line_count": 8,
        "empty_lines": 2,
        "comment_lines": 4,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_nlp\\test_syllable\\test_engine.py": {
      "filepath": "tests\\test_nlp\\test_syllable\\test_engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 8
      },
      "code_metrics": {
        "line_count": 8,
        "empty_lines": 2,
        "comment_lines": 4,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_nlp\\test_syllable\\__init__.py": {
      "filepath": "tests\\test_nlp\\test_syllable\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 8
      },
      "code_metrics": {
        "line_count": 8,
        "empty_lines": 2,
        "comment_lines": 4,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_nlp\\test_weight\\test_engine.py": {
      "filepath": "tests\\test_nlp\\test_weight\\test_engine.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 8
      },
      "code_metrics": {
        "line_count": 8,
        "empty_lines": 2,
        "comment_lines": 4,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    },
    "tests\\test_nlp\\test_weight\\__init__.py": {
      "filepath": "tests\\test_nlp\\test_weight\\__init__.py",
      "syntax_analysis": {
        "syntax_valid": true,
        "errors": [],
        "severity_score": 0,
        "error_types": [],
        "line_count": 8
      },
      "code_metrics": {
        "line_count": 8,
        "empty_lines": 2,
        "comment_lines": 4,
        "function_count": 1,
        "class_count": 0,
        "import_count": 0,
        "complexity_indicators": {
          "nested_functions": 0,
          "try_except_blocks": 0,
          "long_lines": 0,
          "deep_nesting": 0
        },
        "complexity_score": 0.0
      },
      "fixability_score": 10,
      "severity_score": 0,
      "category": "test_files"
    }
  },
  "module_categories": {
    "core": [],
    "experimental": [
      "advanced_arabic_function_words_generator.py",
      "advanced_arabic_phonology_system.py",
      "advanced_arabic_proper_names_generator.py",
      "advanced_arabic_vector_generator.py",
      "advanced_complex_word_demo.py",
      "arabic_demonstrative_evaluation.py",
      "arabic_demonstrative_pronouns_advanced_tester.py",
      "arabic_demonstrative_pronouns_deep_model.py",
      "arabic_demonstrative_pronouns_generator.py",
      "arabic_function_words_generator.py",
      "arabic_function_words_generator_clean.py",
      "arabic_inflection_corrected.py",
      "arabic_inflection_rules_engine.py",
      "arabic_inflection_ultimate.py",
      "arabic_inflection_ultimate_fixed.py",
      "arabic_interrogative_pronouns_deep_model.py",
      "arabic_interrogative_pronouns_enhanced.py",
      "arabic_interrogative_pronouns_final.py",
      "arabic_interrogative_pronouns_generator.py",
      "arabic_mathematical_generator.py",
      "ARABIC_MATH_GENERATOR_COMPLETION_REPORT.py",
      "arabic_morphological_weight_generator.py",
      "arabic_nlp_status_report.py",
      "arabic_normalizer.py",
      "arabic_phoneme_word_decision_tree.py",
      "arabic_phonological_foundation.py",
      "arabic_pronouns_deep_model.py",
      "arabic_pronouns_generator.py",
      "arabic_pronouns_generator_enhanced.py",
      "arabic_relative_pronouns_advanced_tester.py",
      "arabic_relative_pronouns_deep_model.py",
      "arabic_relative_pronouns_deep_model_simplified.py",
      "arabic_relative_pronouns_generator.py",
      "arabic_syllable_generator.py",
      "arabic_test.py",
      "arabic_vector_engine.py",
      "arabic_verb_conjugator.py",
      "backup_unified_plugin_manager.py",
      "citation_standardization_system.py",
      "complete_all_13_engines.py",
      "complete_arabic_phonological_coverage.py",
      "complete_arabic_phonological_foundation.py",
      "complete_arabic_tracer.py",
      "complex_word_analysis_demo.py",
      "comprehensive_arabic_phonological_system.py",
      "comprehensive_arabic_verb_syllable_generator.py",
      "comprehensive_encoding_fix.py",
      "comprehensive_engine_analysis.py",
      "comprehensive_file_analysis.py",
      "comprehensive_phoneme_engine.py",
      "comprehensive_progressive_system.py",
      "create_working_engines.py",
      "debug_output.py",
      "debug_test.py",
      "enhanced_demo_all_engines.py",
      "enhanced_final_analysis.py",
      "enhanced_system_architecture.py",
      "final_comprehensive_cleanup.py",
      "final_comprehensive_comparison.py",
      "final_comprehensive_report.py",
      "final_comprehensive_report_generator.py",
      "forensic_audit.py",
      "hafez_morphology_reactor.py",
      "hafez_phonemes.py",
      "hafez_syllables.py",
      "harakat_engine.py",
      "hierarchical_demo.py",
      "hierarchical_graph_engine.py",
      "integrated_engine.py",
      "integrated_progressive_system.py",
      "morphology_model.py",
      "phoneme_model.py",
      "phoneme_weight_map.py",
      "phonology_core_unified.py",
      "progressive_integration_analysis.py",
      "progressive_vector_tracker.py",
      "PROJECT_COMPLETION_REPORT.py",
      "quality_status_report.py",
      "remove_arabic_forever.py",
      "run_all_nlp_engines.py",
      "simple_text_cleaner.py",
      "syllable_accomplishments.py",
      "syllable_encoder.py",
      "syllable_mission_accomplished.py",
      "syllable_model.py",
      "syllable_phonological_engine.py",
      "ultimate_syntax_fix.py",
      "unified_arabic_engine.py",
      "unified_phonemes.py",
      "utf8_terminal_cleaner.py",
      "validate_citations.py",
      "verify_string_fixes.py",
      "violation_elimination_system.py",
      "winsurf_standards_library.py",
      "winsurf_verification_system.py",
      "xampp_arabic_phonology.py",
      "zero_layer_phonology.py",
      "core\\base_engine.py",
      "core\\config.py",
      "nlp\\advanced_arabic_engine.py",
      "nlp\\base_engine.py",
      "nlp\\derivation\\engine.py",
      "nlp\\derivation\\__init__.py",
      "nlp\\derivation\\models\\comparative.py",
      "nlp\\derivation\\models\\derive.py",
      "nlp\\derivation\\models\\pattern_embed.py",
      "nlp\\derivation\\models\\root_embed.py",
      "nlp\\frozen_root\\engine.py",
      "nlp\\frozen_root\\engine_new.py",
      "nlp\\frozen_root\\__init__.py",
      "nlp\\frozen_root\\models\\classifier.py",
      "nlp\\frozen_root\\models\\syllable_check.py",
      "nlp\\frozen_root\\models\\verb_check.py",
      "nlp\\frozen_root\\models\\__init__.py",
      "nlp\\full_pipeline\\engine.py",
      "nlp\\grammatical_particles\\engine.py",
      "nlp\\inflection\\engine.py",
      "nlp\\inflection\\models\\feature_space.py",
      "nlp\\inflection\\models\\inflect.py",
      "nlp\\morphology\\engine.py",
      "nlp\\morphology\\config\\settings.py",
      "nlp\\morphology\\models\\morphological_models.py",
      "nlp\\particles\\engine.py",
      "nlp\\particles\\models\\particle_classify.py",
      "nlp\\particles\\models\\particle_segment.py",
      "nlp\\phoneme\\engine.py",
      "nlp\\phoneme_advanced\\engine.py",
      "nlp\\phonological\\api.py",
      "nlp\\phonological\\engine.py",
      "nlp\\phonological\\engine_old.py",
      "nlp\\phonological\\models\\assimilation.py",
      "nlp\\phonological\\models\\deletion.py",
      "nlp\\phonological\\models\\inversion.py",
      "nlp\\phonological\\models\\rule_base.py",
      "nlp\\phonology\\engine.py",
      "nlp\\phonology\\engine_clean.py",
      "nlp\\phonology\\config\\settings.py",
      "nlp\\syllable\\engine.py",
      "nlp\\syllable\\engine_advanced.py",
      "nlp\\syllable\\models\\segmenter.py",
      "nlp\\syllable\\models\\templates.py",
      "nlp\\weight\\engine.py",
      "tests\\conftest.py"
    ],
    "dead_code": [
      "arabic_demonstrative_pronouns_demo.py",
      "arabic_word_tracer_app.py",
      "arabic_word_tracer_demo.py",
      "check_violations.py",
      "check_violations_v2.py",
      "demo_all_engines.py",
      "disable_error_squiggles.py",
      "documentation_standards.py",
      "fixed_demo_all_engines.py",
      "master_integration_system.py",
      "simple_test.py",
      "toggle_error_squiggles.py",
      "verify_error_suppression.py",
      "__init__.py",
      "core\\__init__.py",
      "nlp\\machine_learning_engine.py",
      "nlp\\__init__.py",
      "nlp\\derivation\\models\\__init__.py",
      "nlp\\full_pipeline\\__init__.py",
      "nlp\\grammatical_particles\\__init__.py",
      "nlp\\inflection\\__init__.py",
      "nlp\\inflection\\models\\__init__.py",
      "nlp\\phoneme\\__init__.py",
      "nlp\\phonological\\engine_professional.py",
      "nlp\\phonological\\__init__.py",
      "nlp\\phonological\\models\\__init__.py",
      "nlp\\syllable\\__init__.py",
      "nlp\\syllable\\models\\__init__.py",
      "tests\\__init__.py"
    ],
    "test_files": [
      "arabic_interrogative_pronouns_test_analysis.py",
      "manual_test_fix.py",
      "test_all_fixed_engines.py",
      "test_arabic_math_concepts.py",
      "test_morphological_weights.py",
      "test_phoneme_integration.py",
      "test_phoneme_simple.py",
      "test_proper_names_examples.py",
      "test_syllable_engine.py",
      "test_syllable_generator.py",
      "test_syllable_readiness.py",
      "test_waw_hamza.py",
      "test_word.py",
      "test_zero_layer_comprehensive.py",
      "xampp_test_phonemes_matrix.py",
      "tests\\test_arabic_system.py",
      "tests\\test_hello_world.py",
      "tests\\test_phoneme_processing.py",
      "tests\\test_syllable_processing.py",
      "tests\\test_core\\test_base_engine.py",
      "tests\\test_core\\test_config.py",
      "tests\\test_core\\__init__.py",
      "tests\\test_nlp\\__init__.py",
      "tests\\test_nlp\\test_derivation\\test_engine.py",
      "tests\\test_nlp\\test_derivation\\__init__.py",
      "tests\\test_nlp\\test_frozen_root\\test_engine.py",
      "tests\\test_nlp\\test_frozen_root\\__init__.py",
      "tests\\test_nlp\\test_inflection\\test_engine.py",
      "tests\\test_nlp\\test_inflection\\__init__.py",
      "tests\\test_nlp\\test_morphology\\test_engine.py",
      "tests\\test_nlp\\test_morphology\\__init__.py",
      "tests\\test_nlp\\test_phoneme\\test_engine.py",
      "tests\\test_nlp\\test_phoneme\\__init__.py",
      "tests\\test_nlp\\test_phonological\\test_engine.py",
      "tests\\test_nlp\\test_phonological\\__init__.py",
      "tests\\test_nlp\\test_syllable\\test_engine.py",
      "tests\\test_nlp\\test_syllable\\__init__.py",
      "tests\\test_nlp\\test_weight\\test_engine.py",
      "tests\\test_nlp\\test_weight\\__init__.py"
    ],
    "tools": [
      "advanced_ast_syntax_fixer.py",
      "arabic_demonstrative_pronouns_analyzer.py",
      "arabic_function_words_analyzer.py",
      "arabic_pronouns_analyzer.py",
      "arabic_relative_pronouns_analyzer.py",
      "comprehensive_syntax_batch_fixer.py",
      "critical_syntax_fixer.py",
      "emergency_reorganization_system.py",
      "emergency_syntax_fixer.py",
      "engine_fix_guide.py",
      "enhanced_citation_validator.py",
      "final_arrow_syntax_fixer.py",
      "fix_comparison_operators.py",
      "fix_fstring_syntax.py",
      "fix_import_data.py",
      "fix_numeric_comparisons.py",
      "fix_return_type_arrow.py",
      "fix_syntax_errors.py",
      "fix_winsurf_issues.py",
      "interactive_progressive_analyzer.py",
      "phonemes_harakat_analyzer.py",
      "precision_violation_fixer.py",
      "simple_arrow_syntax_fixer.py",
      "surgical_syntax_fixer_v2.py",
      "surgical_syntax_fixer_v3.py",
      "surgical_syntax_repair.py",
      "targeted_critical_syntax_fixer.py",
      "ultimate_violation_eliminator.py",
      "ultimate_winsurf_eliminator.py",
      "utf8_encoding_fixer.py",
      "yellow_line_eliminator.py",
      "nlp\\weight\\models\\analyzer.py"
    ],
    "nlp_engines": []
  },
  "heatmap_data": {
    "broken_files": [
      {
        "file": "quality_status_report.py",
        "severity": 6,
        "fixability": 7,
        "error_count": 1,
        "error_types": [
          "syntax_error"
        ],
        "category": "experimental",
        "line_count": 183
      },
      {
        "file": "surgical_syntax_repair.py",
        "severity": 6,
        "fixability": 7,
        "error_count": 1,
        "error_types": [
          "syntax_error"
        ],
        "category": "tools",
        "line_count": 185
      },
      {
        "file": "test_syllable_generator.py",
        "severity": 6,
        "fixability": 7,
        "error_count": 1,
        "error_types": [
          "syntax_error"
        ],
        "category": "test_files",
        "line_count": 59
      },
      {
        "file": "validate_citations.py",
        "severity": 6,
        "fixability": 7,
        "error_count": 1,
        "error_types": [
          "syntax_error"
        ],
        "category": "experimental",
        "line_count": 378
      },
      {
        "file": "nlp\\inflection\\models\\inflect.py",
        "severity": 6,
        "fixability": 7,
        "error_count": 1,
        "error_types": [
          "syntax_error"
        ],
        "category": "experimental",
        "line_count": 559
      },
      {
        "file": "nlp\\morphology\\models\\morphological_models.py",
        "severity": 6,
        "fixability": 7,
        "error_count": 1,
        "error_types": [
          "syntax_error"
        ],
        "category": "experimental",
        "line_count": 926
      },
      {
        "file": "nlp\\phoneme\\__init__.py",
        "severity": 6,
        "fixability": 7,
        "error_count": 1,
        "error_types": [
          "syntax_error"
        ],
        "category": "dead_code",
        "line_count": 25
      },
      {
        "file": "nlp\\phonological\\engine_old.py",
        "severity": 6,
        "fixability": 7,
        "error_count": 1,
        "error_types": [
          "syntax_error"
        ],
        "category": "experimental",
        "line_count": 404
      },
      {
        "file": "surgical_syntax_fixer_v2.py",
        "severity": 5,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "other_error"
        ],
        "category": "tools",
        "line_count": 383
      },
      {
        "file": "hierarchical_graph_engine.py",
        "severity": 4,
        "fixability": 7,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 1756
      },
      {
        "file": "unified_arabic_engine.py",
        "severity": 4,
        "fixability": 7,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 1296
      },
      {
        "file": "arabic_demonstrative_pronouns_deep_model.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 813
      },
      {
        "file": "arabic_function_words_analyzer.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "tools",
        "line_count": 264
      },
      {
        "file": "arabic_interrogative_pronouns_deep_model.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 859
      },
      {
        "file": "arabic_interrogative_pronouns_final.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 578
      },
      {
        "file": "arabic_interrogative_pronouns_test_analysis.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "test_files",
        "line_count": 604
      },
      {
        "file": "arabic_morphological_weight_generator.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 822
      },
      {
        "file": "arabic_pronouns_analyzer.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "tools",
        "line_count": 528
      },
      {
        "file": "arabic_pronouns_deep_model.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 575
      },
      {
        "file": "arabic_pronouns_generator_enhanced.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 520
      },
      {
        "file": "arabic_relative_pronouns_deep_model.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 844
      },
      {
        "file": "arabic_relative_pronouns_deep_model_simplified.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 665
      },
      {
        "file": "citation_standardization_system.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 589
      },
      {
        "file": "complex_word_analysis_demo.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 433
      },
      {
        "file": "comprehensive_phoneme_engine.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 743
      },
      {
        "file": "enhanced_final_analysis.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 250
      },
      {
        "file": "enhanced_system_architecture.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 647
      },
      {
        "file": "final_arrow_syntax_fixer.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "tools",
        "line_count": 174
      },
      {
        "file": "final_comprehensive_comparison.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 441
      },
      {
        "file": "final_comprehensive_report_generator.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 457
      },
      {
        "file": "fix_import_data.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "tools",
        "line_count": 147
      },
      {
        "file": "fix_numeric_comparisons.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "tools",
        "line_count": 74
      },
      {
        "file": "fix_return_type_arrow.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "tools",
        "line_count": 146
      },
      {
        "file": "forensic_audit.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 432
      },
      {
        "file": "harakat_engine.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 550
      },
      {
        "file": "hierarchical_demo.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 307
      },
      {
        "file": "integrated_engine.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 440
      },
      {
        "file": "integrated_progressive_system.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 484
      },
      {
        "file": "interactive_progressive_analyzer.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "tools",
        "line_count": 319
      },
      {
        "file": "simple_arrow_syntax_fixer.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "tools",
        "line_count": 153
      },
      {
        "file": "syllable_model.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 326
      },
      {
        "file": "test_morphological_weights.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "test_files",
        "line_count": 74
      },
      {
        "file": "test_syllable_readiness.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "test_files",
        "line_count": 42
      },
      {
        "file": "test_zero_layer_comprehensive.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "test_files",
        "line_count": 469
      },
      {
        "file": "ultimate_violation_eliminator.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "tools",
        "line_count": 546
      },
      {
        "file": "ultimate_winsurf_eliminator.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "tools",
        "line_count": 568
      },
      {
        "file": "winsurf_standards_library.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 652
      },
      {
        "file": "nlp\\base_engine.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 991
      },
      {
        "file": "nlp\\derivation\\__init__.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 219
      },
      {
        "file": "nlp\\derivation\\models\\root_embed.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 476
      },
      {
        "file": "nlp\\frozen_root\\models\\syllable_check.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 357
      },
      {
        "file": "nlp\\frozen_root\\models\\verb_check.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 361
      },
      {
        "file": "nlp\\phoneme_advanced\\engine.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 445
      },
      {
        "file": "nlp\\phonological\\models\\assimilation.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 231
      },
      {
        "file": "nlp\\phonological\\models\\inversion.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 312
      },
      {
        "file": "nlp\\phonology\\engine_clean.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "experimental",
        "line_count": 498
      },
      {
        "file": "nlp\\weight\\models\\analyzer.py",
        "severity": 4,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "bracket_error"
        ],
        "category": "tools",
        "line_count": 787
      },
      {
        "file": "advanced_arabic_proper_names_generator.py",
        "severity": 2,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 1567
      },
      {
        "file": "advanced_arabic_vector_generator.py",
        "severity": 2,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 1155
      },
      {
        "file": "arabic_function_words_generator.py",
        "severity": 2,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 1507
      },
      {
        "file": "arabic_mathematical_generator.py",
        "severity": 2,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 1487
      },
      {
        "file": "arabic_phonological_foundation.py",
        "severity": 2,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 1179
      },
      {
        "file": "arabic_verb_conjugator.py",
        "severity": 2,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 1057
      },
      {
        "file": "complete_all_13_engines.py",
        "severity": 2,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 1369
      },
      {
        "file": "comprehensive_arabic_verb_syllable_generator.py",
        "severity": 2,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 1095
      },
      {
        "file": "comprehensive_progressive_system.py",
        "severity": 2,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 1394
      },
      {
        "file": "hafez_morphology_reactor.py",
        "severity": 2,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 1067
      },
      {
        "file": "phonology_core_unified.py",
        "severity": 2,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 1281
      },
      {
        "file": "progressive_vector_tracker.py",
        "severity": 2,
        "fixability": 8,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 1630
      },
      {
        "file": "advanced_arabic_function_words_generator.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 667
      },
      {
        "file": "advanced_arabic_phonology_system.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 717
      },
      {
        "file": "advanced_ast_syntax_fixer.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "tools",
        "line_count": 395
      },
      {
        "file": "arabic_demonstrative_pronouns_generator.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 965
      },
      {
        "file": "arabic_function_words_generator_clean.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 830
      },
      {
        "file": "arabic_inflection_corrected.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 405
      },
      {
        "file": "arabic_inflection_rules_engine.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 988
      },
      {
        "file": "arabic_inflection_ultimate.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 721
      },
      {
        "file": "arabic_inflection_ultimate_fixed.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 603
      },
      {
        "file": "arabic_interrogative_pronouns_enhanced.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 885
      },
      {
        "file": "arabic_test.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "string_error"
        ],
        "category": "experimental",
        "line_count": 89
      },
      {
        "file": "arabic_vector_engine.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 847
      },
      {
        "file": "backup_unified_plugin_manager.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 549
      },
      {
        "file": "complete_arabic_phonological_coverage.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 882
      },
      {
        "file": "complete_arabic_phonological_foundation.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 899
      },
      {
        "file": "complete_arabic_tracer.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 623
      },
      {
        "file": "comprehensive_encoding_fix.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 241
      },
      {
        "file": "comprehensive_syntax_batch_fixer.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "string_error"
        ],
        "category": "tools",
        "line_count": 389
      },
      {
        "file": "debug_test.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "string_error"
        ],
        "category": "experimental",
        "line_count": 45
      },
      {
        "file": "emergency_syntax_fixer.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "tools",
        "line_count": 290
      },
      {
        "file": "fix_comparison_operators.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "tools",
        "line_count": 68
      },
      {
        "file": "fix_fstring_syntax.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "string_error"
        ],
        "category": "tools",
        "line_count": 154
      },
      {
        "file": "fix_syntax_errors.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "tools",
        "line_count": 138
      },
      {
        "file": "morphology_model.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 354
      },
      {
        "file": "phonemes_harakat_analyzer.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "tools",
        "line_count": 758
      },
      {
        "file": "run_all_nlp_engines.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 333
      },
      {
        "file": "syllable_mission_accomplished.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 201
      },
      {
        "file": "targeted_critical_syntax_fixer.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "string_error"
        ],
        "category": "tools",
        "line_count": 177
      },
      {
        "file": "test_all_fixed_engines.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "test_files",
        "line_count": 211
      },
      {
        "file": "test_arabic_math_concepts.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "test_files",
        "line_count": 616
      },
      {
        "file": "test_proper_names_examples.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "test_files",
        "line_count": 221
      },
      {
        "file": "test_syllable_engine.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "test_files",
        "line_count": 158
      },
      {
        "file": "test_waw_hamza.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "string_error"
        ],
        "category": "test_files",
        "line_count": 66
      },
      {
        "file": "ultimate_syntax_fix.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 369
      },
      {
        "file": "winsurf_verification_system.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 386
      },
      {
        "file": "yellow_line_eliminator.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "tools",
        "line_count": 353
      },
      {
        "file": "zero_layer_phonology.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 634
      },
      {
        "file": "nlp\\derivation\\engine.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 567
      },
      {
        "file": "nlp\\derivation\\models\\comparative.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 596
      },
      {
        "file": "nlp\\derivation\\models\\derive.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 922
      },
      {
        "file": "nlp\\frozen_root\\models\\classifier.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 478
      },
      {
        "file": "nlp\\inflection\\models\\feature_space.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "string_error"
        ],
        "category": "experimental",
        "line_count": 590
      },
      {
        "file": "nlp\\particles\\models\\particle_classify.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "string_error"
        ],
        "category": "experimental",
        "line_count": 171
      },
      {
        "file": "nlp\\particles\\models\\particle_segment.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 304
      },
      {
        "file": "nlp\\phoneme\\engine.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 408
      },
      {
        "file": "nlp\\phonological\\api.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 428
      },
      {
        "file": "nlp\\phonological\\engine.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 789
      },
      {
        "file": "nlp\\syllable\\engine_advanced.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 644
      },
      {
        "file": "nlp\\syllable\\models\\templates.py",
        "severity": 2,
        "fixability": 9,
        "error_count": 1,
        "error_types": [
          "indentation_error"
        ],
        "category": "experimental",
        "line_count": 325
      }
    ],
    "total_files": 243,
    "broken_count": 118,
    "success_rate": 51.440329218106996
  },
  "severity_ranking": [
    {
      "file": "nlp\\weight\\models\\analyzer.py",
      "category": "tools",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 787,
      "complexity": 10,
      "priority_score": 15.11
    },
    {
      "file": "arabic_interrogative_pronouns_test_analysis.py",
      "category": "test_files",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 604,
      "complexity": 7.13,
      "priority_score": 14.5
    },
    {
      "file": "nlp\\morphology\\models\\morphological_models.py",
      "category": "experimental",
      "severity_score": 6,
      "fixability_score": 7,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 926,
      "complexity": 10,
      "priority_score": 14.08
    },
    {
      "file": "nlp\\base_engine.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 991,
      "complexity": 10,
      "priority_score": 12.68
    },
    {
      "file": "test_arabic_math_concepts.py",
      "category": "test_files",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 616,
      "complexity": 9.370000000000001,
      "priority_score": 12.01
    },
    {
      "file": "hierarchical_graph_engine.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 7,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 1756,
      "complexity": 10,
      "priority_score": 12.0
    },
    {
      "file": "unified_arabic_engine.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 7,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 1296,
      "complexity": 10,
      "priority_score": 12.0
    },
    {
      "file": "phonemes_harakat_analyzer.py",
      "category": "tools",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 758,
      "complexity": 10,
      "priority_score": 11.82
    },
    {
      "file": "test_zero_layer_comprehensive.py",
      "category": "test_files",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 469,
      "complexity": 10,
      "priority_score": 11.26
    },
    {
      "file": "arabic_interrogative_pronouns_deep_model.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 859,
      "complexity": 5.470000000000001,
      "priority_score": 11.0
    },
    {
      "file": "ultimate_winsurf_eliminator.py",
      "category": "tools",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 568,
      "complexity": 3.8200000000000003,
      "priority_score": 10.91
    },
    {
      "file": "arabic_relative_pronouns_deep_model.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 844,
      "complexity": 9.7,
      "priority_score": 10.8
    },
    {
      "file": "arabic_morphological_weight_generator.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 822,
      "complexity": 9.52,
      "priority_score": 10.52
    },
    {
      "file": "ultimate_violation_eliminator.py",
      "category": "tools",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 546,
      "complexity": 5.89,
      "priority_score": 10.48
    },
    {
      "file": "arabic_demonstrative_pronouns_deep_model.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 813,
      "complexity": 5.17,
      "priority_score": 10.41
    },
    {
      "file": "arabic_inflection_rules_engine.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 988,
      "complexity": 10,
      "priority_score": 10.28
    },
    {
      "file": "arabic_pronouns_analyzer.py",
      "category": "tools",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 528,
      "complexity": 3.41,
      "priority_score": 10.14
    },
    {
      "file": "arabic_demonstrative_pronouns_generator.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 965,
      "complexity": 10,
      "priority_score": 10.04
    },
    {
      "file": "advanced_arabic_proper_names_generator.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 1567,
      "complexity": 10,
      "priority_score": 9.6
    },
    {
      "file": "advanced_arabic_vector_generator.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 1155,
      "complexity": 9.8,
      "priority_score": 9.6
    },
    {
      "file": "arabic_function_words_generator.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 1507,
      "complexity": 10,
      "priority_score": 9.6
    },
    {
      "file": "arabic_mathematical_generator.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 1487,
      "complexity": 10,
      "priority_score": 9.6
    },
    {
      "file": "arabic_phonological_foundation.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 1179,
      "complexity": 5.970000000000001,
      "priority_score": 9.6
    },
    {
      "file": "arabic_verb_conjugator.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 1057,
      "complexity": 10,
      "priority_score": 9.6
    },
    {
      "file": "complete_all_13_engines.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 1369,
      "complexity": 10,
      "priority_score": 9.6
    },
    {
      "file": "comprehensive_arabic_verb_syllable_generator.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 1095,
      "complexity": 10,
      "priority_score": 9.6
    },
    {
      "file": "comprehensive_progressive_system.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 1394,
      "complexity": 10,
      "priority_score": 9.6
    },
    {
      "file": "hafez_morphology_reactor.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 1067,
      "complexity": 10,
      "priority_score": 9.6
    },
    {
      "file": "phonology_core_unified.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 1281,
      "complexity": 10,
      "priority_score": 9.6
    },
    {
      "file": "progressive_vector_tracker.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 1630,
      "complexity": 10,
      "priority_score": 9.6
    },
    {
      "file": "nlp\\derivation\\models\\derive.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 922,
      "complexity": 10,
      "priority_score": 9.59
    },
    {
      "file": "comprehensive_phoneme_engine.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 743,
      "complexity": 9.92,
      "priority_score": 9.51
    },
    {
      "file": "complete_arabic_phonological_foundation.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 899,
      "complexity": 3.8200000000000003,
      "priority_score": 9.35
    },
    {
      "file": "arabic_interrogative_pronouns_enhanced.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 885,
      "complexity": 6.08,
      "priority_score": 9.2
    },
    {
      "file": "complete_arabic_phonological_coverage.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 882,
      "complexity": 10,
      "priority_score": 9.17
    },
    {
      "file": "arabic_vector_engine.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 847,
      "complexity": 6.3,
      "priority_score": 8.81
    },
    {
      "file": "arabic_function_words_generator_clean.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 830,
      "complexity": 10,
      "priority_score": 8.63
    },
    {
      "file": "arabic_relative_pronouns_deep_model_simplified.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 665,
      "complexity": 6.2,
      "priority_score": 8.51
    },
    {
      "file": "nlp\\inflection\\models\\inflect.py",
      "category": "experimental",
      "severity_score": 6,
      "fixability_score": 7,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 559,
      "complexity": 4.2700000000000005,
      "priority_score": 8.5
    },
    {
      "file": "winsurf_standards_library.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 652,
      "complexity": 3.07,
      "priority_score": 8.35
    },
    {
      "file": "enhanced_system_architecture.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 647,
      "complexity": 10,
      "priority_score": 8.28
    },
    {
      "file": "surgical_syntax_fixer_v2.py",
      "category": "tools",
      "severity_score": 5,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 383,
      "complexity": 10,
      "priority_score": 8.27
    },
    {
      "file": "nlp\\phonological\\engine.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 789,
      "complexity": 10,
      "priority_score": 8.21
    },
    {
      "file": "citation_standardization_system.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 589,
      "complexity": 3.07,
      "priority_score": 7.54
    },
    {
      "file": "arabic_inflection_ultimate.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 721,
      "complexity": 10,
      "priority_score": 7.5
    },
    {
      "file": "advanced_arabic_phonology_system.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 717,
      "complexity": 7.609999999999999,
      "priority_score": 7.46
    },
    {
      "file": "arabic_interrogative_pronouns_final.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 578,
      "complexity": 2.93,
      "priority_score": 7.4
    },
    {
      "file": "arabic_pronouns_deep_model.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 575,
      "complexity": 6.11,
      "priority_score": 7.36
    },
    {
      "file": "harakat_engine.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 550,
      "complexity": 7.609999999999999,
      "priority_score": 7.04
    },
    {
      "file": "advanced_arabic_function_words_generator.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 667,
      "complexity": 7.01,
      "priority_score": 6.94
    },
    {
      "file": "nlp\\syllable\\engine_advanced.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 644,
      "complexity": 9.39,
      "priority_score": 6.7
    },
    {
      "file": "arabic_pronouns_generator_enhanced.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 520,
      "complexity": 5.05,
      "priority_score": 6.66
    },
    {
      "file": "zero_layer_phonology.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 634,
      "complexity": 5.85,
      "priority_score": 6.59
    },
    {
      "file": "complete_arabic_tracer.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 623,
      "complexity": 10,
      "priority_score": 6.48
    },
    {
      "file": "nlp\\phonology\\engine_clean.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 498,
      "complexity": 6.29,
      "priority_score": 6.37
    },
    {
      "file": "arabic_inflection_ultimate_fixed.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 603,
      "complexity": 8.690000000000001,
      "priority_score": 6.27
    },
    {
      "file": "integrated_progressive_system.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 484,
      "complexity": 10,
      "priority_score": 6.2
    },
    {
      "file": "nlp\\derivation\\models\\comparative.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 596,
      "complexity": 6.21,
      "priority_score": 6.2
    },
    {
      "file": "advanced_ast_syntax_fixer.py",
      "category": "tools",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 395,
      "complexity": 10,
      "priority_score": 6.16
    },
    {
      "file": "nlp\\inflection\\models\\feature_space.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 590,
      "complexity": 4.13,
      "priority_score": 6.14
    },
    {
      "file": "nlp\\phonological\\engine_old.py",
      "category": "experimental",
      "severity_score": 6,
      "fixability_score": 7,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 404,
      "complexity": 6.76,
      "priority_score": 6.14
    },
    {
      "file": "interactive_progressive_analyzer.py",
      "category": "tools",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 319,
      "complexity": 0.31,
      "priority_score": 6.12
    },
    {
      "file": "nlp\\derivation\\models\\root_embed.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 476,
      "complexity": 4.2,
      "priority_score": 6.09
    },
    {
      "file": "comprehensive_syntax_batch_fixer.py",
      "category": "tools",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 389,
      "complexity": 5.2700000000000005,
      "priority_score": 6.07
    },
    {
      "file": "nlp\\derivation\\engine.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 567,
      "complexity": 7.85,
      "priority_score": 5.9
    },
    {
      "file": "final_comprehensive_report_generator.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 457,
      "complexity": 2.33,
      "priority_score": 5.85
    },
    {
      "file": "validate_citations.py",
      "category": "experimental",
      "severity_score": 6,
      "fixability_score": 7,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 378,
      "complexity": 4.24,
      "priority_score": 5.75
    },
    {
      "file": "backup_unified_plugin_manager.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 549,
      "complexity": 4.5200000000000005,
      "priority_score": 5.71
    },
    {
      "file": "nlp\\phoneme_advanced\\engine.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 445,
      "complexity": 9.809999999999999,
      "priority_score": 5.7
    },
    {
      "file": "final_comprehensive_comparison.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 441,
      "complexity": 7.7,
      "priority_score": 5.64
    },
    {
      "file": "integrated_engine.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 440,
      "complexity": 4.59,
      "priority_score": 5.63
    },
    {
      "file": "complex_word_analysis_demo.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 433,
      "complexity": 6.18,
      "priority_score": 5.54
    },
    {
      "file": "forensic_audit.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 432,
      "complexity": 10,
      "priority_score": 5.53
    },
    {
      "file": "yellow_line_eliminator.py",
      "category": "tools",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 353,
      "complexity": 3.04,
      "priority_score": 5.51
    },
    {
      "file": "arabic_function_words_analyzer.py",
      "category": "tools",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 264,
      "complexity": 0.08,
      "priority_score": 5.07
    },
    {
      "file": "nlp\\frozen_root\\models\\classifier.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 478,
      "complexity": 4.65,
      "priority_score": 4.97
    },
    {
      "file": "nlp\\frozen_root\\models\\verb_check.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 361,
      "complexity": 2.45,
      "priority_score": 4.62
    },
    {
      "file": "nlp\\frozen_root\\models\\syllable_check.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 357,
      "complexity": 2.15,
      "priority_score": 4.57
    },
    {
      "file": "emergency_syntax_fixer.py",
      "category": "tools",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 290,
      "complexity": 5.5,
      "priority_score": 4.52
    },
    {
      "file": "nlp\\phonological\\api.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 428,
      "complexity": 9.2,
      "priority_score": 4.45
    },
    {
      "file": "test_proper_names_examples.py",
      "category": "test_files",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 221,
      "complexity": 0.32,
      "priority_score": 4.31
    },
    {
      "file": "nlp\\phoneme\\engine.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 408,
      "complexity": 8.709999999999999,
      "priority_score": 4.24
    },
    {
      "file": "surgical_syntax_repair.py",
      "category": "tools",
      "severity_score": 6,
      "fixability_score": 7,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 185,
      "complexity": 0.45999999999999996,
      "priority_score": 4.22
    },
    {
      "file": "arabic_inflection_corrected.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 405,
      "complexity": 3.18,
      "priority_score": 4.21
    },
    {
      "file": "syllable_model.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 326,
      "complexity": 5.95,
      "priority_score": 4.17
    },
    {
      "file": "test_all_fixed_engines.py",
      "category": "test_files",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 211,
      "complexity": 1.7100000000000002,
      "priority_score": 4.11
    },
    {
      "file": "winsurf_verification_system.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 386,
      "complexity": 10,
      "priority_score": 4.01
    },
    {
      "file": "nlp\\phonological\\models\\inversion.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 312,
      "complexity": 4.85,
      "priority_score": 3.99
    },
    {
      "file": "hierarchical_demo.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 307,
      "complexity": 2.96,
      "priority_score": 3.93
    },
    {
      "file": "ultimate_syntax_fix.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 369,
      "complexity": 2.1,
      "priority_score": 3.84
    },
    {
      "file": "morphology_model.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 354,
      "complexity": 5.8,
      "priority_score": 3.68
    },
    {
      "file": "run_all_nlp_engines.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 333,
      "complexity": 5.3100000000000005,
      "priority_score": 3.46
    },
    {
      "file": "nlp\\syllable\\models\\templates.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 325,
      "complexity": 5.0200000000000005,
      "priority_score": 3.38
    },
    {
      "file": "final_arrow_syntax_fixer.py",
      "category": "tools",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 174,
      "complexity": 1.7,
      "priority_score": 3.34
    },
    {
      "file": "enhanced_final_analysis.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 250,
      "complexity": 3.28,
      "priority_score": 3.2
    },
    {
      "file": "nlp\\particles\\models\\particle_segment.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 304,
      "complexity": 2.84,
      "priority_score": 3.16
    },
    {
      "file": "test_syllable_engine.py",
      "category": "test_files",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 158,
      "complexity": 3.31,
      "priority_score": 3.08
    },
    {
      "file": "nlp\\phonological\\models\\assimilation.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 231,
      "complexity": 8.41,
      "priority_score": 2.96
    },
    {
      "file": "simple_arrow_syntax_fixer.py",
      "category": "tools",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 153,
      "complexity": 1.52,
      "priority_score": 2.94
    },
    {
      "file": "fix_import_data.py",
      "category": "tools",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 147,
      "complexity": 1.52,
      "priority_score": 2.82
    },
    {
      "file": "fix_return_type_arrow.py",
      "category": "tools",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 146,
      "complexity": 1.52,
      "priority_score": 2.8
    },
    {
      "file": "nlp\\derivation\\__init__.py",
      "category": "experimental",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 219,
      "complexity": 0.11000000000000001,
      "priority_score": 2.8
    },
    {
      "file": "quality_status_report.py",
      "category": "experimental",
      "severity_score": 6,
      "fixability_score": 7,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 183,
      "complexity": 0.1,
      "priority_score": 2.78
    },
    {
      "file": "targeted_critical_syntax_fixer.py",
      "category": "tools",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 177,
      "complexity": 0.55,
      "priority_score": 2.76
    },
    {
      "file": "comprehensive_encoding_fix.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 241,
      "complexity": 3.5100000000000002,
      "priority_score": 2.51
    },
    {
      "file": "fix_fstring_syntax.py",
      "category": "tools",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 154,
      "complexity": 0.9400000000000001,
      "priority_score": 2.4
    },
    {
      "file": "fix_syntax_errors.py",
      "category": "tools",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 138,
      "complexity": 1.4,
      "priority_score": 2.15
    },
    {
      "file": "syllable_mission_accomplished.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 201,
      "complexity": 0.31,
      "priority_score": 2.09
    },
    {
      "file": "test_morphological_weights.py",
      "category": "test_files",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 74,
      "complexity": 0.1,
      "priority_score": 1.78
    },
    {
      "file": "nlp\\particles\\models\\particle_classify.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 171,
      "complexity": 1.7,
      "priority_score": 1.78
    },
    {
      "file": "test_syllable_generator.py",
      "category": "test_files",
      "severity_score": 6,
      "fixability_score": 7,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 59,
      "complexity": 0.1,
      "priority_score": 1.68
    },
    {
      "file": "fix_numeric_comparisons.py",
      "category": "tools",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 74,
      "complexity": 0.26,
      "priority_score": 1.42
    },
    {
      "file": "test_waw_hamza.py",
      "category": "test_files",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 66,
      "complexity": 1.0,
      "priority_score": 1.29
    },
    {
      "file": "fix_comparison_operators.py",
      "category": "tools",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 68,
      "complexity": 0.41,
      "priority_score": 1.06
    },
    {
      "file": "test_syllable_readiness.py",
      "category": "test_files",
      "severity_score": 4,
      "fixability_score": 8,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 42,
      "complexity": 0.1,
      "priority_score": 1.01
    },
    {
      "file": "arabic_test.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 89,
      "complexity": 0.1,
      "priority_score": 0.93
    },
    {
      "file": "debug_test.py",
      "category": "experimental",
      "severity_score": 2,
      "fixability_score": 9,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 45,
      "complexity": 0.1,
      "priority_score": 0.47
    },
    {
      "file": "nlp\\phoneme\\__init__.py",
      "category": "dead_code",
      "severity_score": 6,
      "fixability_score": 7,
      "syntax_valid": false,
      "error_count": 1,
      "line_count": 25,
      "complexity": 0.01,
      "priority_score": 0.14
    },
    {
      "file": "advanced_complex_word_demo.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 677,
      "complexity": 10,
      "priority_score": 0
    },
    {
      "file": "arabic_demonstrative_evaluation.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 436,
      "complexity": 4.17,
      "priority_score": 0
    },
    {
      "file": "arabic_demonstrative_pronouns_advanced_tester.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 4,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "arabic_demonstrative_pronouns_analyzer.py",
      "category": "tools",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 4,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "arabic_demonstrative_pronouns_demo.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 4,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "arabic_interrogative_pronouns_generator.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 890,
      "complexity": 10,
      "priority_score": 0
    },
    {
      "file": "ARABIC_MATH_GENERATOR_COMPLETION_REPORT.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 441,
      "complexity": 10,
      "priority_score": 0
    },
    {
      "file": "arabic_nlp_status_report.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 103,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "arabic_normalizer.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 565,
      "complexity": 5.45,
      "priority_score": 0
    },
    {
      "file": "arabic_phoneme_word_decision_tree.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 1194,
      "complexity": 10,
      "priority_score": 0
    },
    {
      "file": "arabic_pronouns_generator.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 884,
      "complexity": 10,
      "priority_score": 0
    },
    {
      "file": "arabic_relative_pronouns_advanced_tester.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 626,
      "complexity": 4.7700000000000005,
      "priority_score": 0
    },
    {
      "file": "arabic_relative_pronouns_analyzer.py",
      "category": "tools",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 660,
      "complexity": 3.96,
      "priority_score": 0
    },
    {
      "file": "arabic_relative_pronouns_generator.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 785,
      "complexity": 10,
      "priority_score": 0
    },
    {
      "file": "arabic_syllable_generator.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 675,
      "complexity": 10,
      "priority_score": 0
    },
    {
      "file": "arabic_word_tracer_app.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 6,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "arabic_word_tracer_demo.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 6,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "check_violations.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 24,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "check_violations_v2.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 6,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "comprehensive_arabic_phonological_system.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 1226,
      "complexity": 10,
      "priority_score": 0
    },
    {
      "file": "comprehensive_engine_analysis.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 385,
      "complexity": 10,
      "priority_score": 0
    },
    {
      "file": "comprehensive_file_analysis.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 634,
      "complexity": 10,
      "priority_score": 0
    },
    {
      "file": "create_working_engines.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 203,
      "complexity": 2.8,
      "priority_score": 0
    },
    {
      "file": "critical_syntax_fixer.py",
      "category": "tools",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 182,
      "complexity": 2.65,
      "priority_score": 0
    },
    {
      "file": "debug_output.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 28,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "demo_all_engines.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 6,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "disable_error_squiggles.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 6,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "documentation_standards.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 6,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "emergency_reorganization_system.py",
      "category": "tools",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 6,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "engine_fix_guide.py",
      "category": "tools",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 98,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "enhanced_citation_validator.py",
      "category": "tools",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 6,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "enhanced_demo_all_engines.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 6,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "final_comprehensive_cleanup.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 6,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "final_comprehensive_report.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 192,
      "complexity": 0.4,
      "priority_score": 0
    },
    {
      "file": "fixed_demo_all_engines.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 6,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "fix_winsurf_issues.py",
      "category": "tools",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 346,
      "complexity": 5.7,
      "priority_score": 0
    },
    {
      "file": "hafez_phonemes.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 135,
      "complexity": 1.0,
      "priority_score": 0
    },
    {
      "file": "hafez_syllables.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 161,
      "complexity": 2.0,
      "priority_score": 0
    },
    {
      "file": "manual_test_fix.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 33,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "master_integration_system.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 6,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "phoneme_model.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 348,
      "complexity": 6.2,
      "priority_score": 0
    },
    {
      "file": "phoneme_weight_map.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 572,
      "complexity": 7.209999999999999,
      "priority_score": 0
    },
    {
      "file": "precision_violation_fixer.py",
      "category": "tools",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 309,
      "complexity": 1.34,
      "priority_score": 0
    },
    {
      "file": "progressive_integration_analysis.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 110,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "PROJECT_COMPLETION_REPORT.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 234,
      "complexity": 1.65,
      "priority_score": 0
    },
    {
      "file": "remove_arabic_forever.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 155,
      "complexity": 2.8,
      "priority_score": 0
    },
    {
      "file": "simple_test.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 36,
      "complexity": 0.1,
      "priority_score": 0
    },
    {
      "file": "simple_text_cleaner.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 116,
      "complexity": 0.1,
      "priority_score": 0
    },
    {
      "file": "surgical_syntax_fixer_v3.py",
      "category": "tools",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 678,
      "complexity": 10,
      "priority_score": 0
    },
    {
      "file": "syllable_accomplishments.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 146,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "syllable_encoder.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 146,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "syllable_phonological_engine.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 356,
      "complexity": 3.2600000000000002,
      "priority_score": 0
    },
    {
      "file": "test_phoneme_integration.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 65,
      "complexity": 0.2,
      "priority_score": 0
    },
    {
      "file": "test_phoneme_simple.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 38,
      "complexity": 0.1,
      "priority_score": 0
    },
    {
      "file": "test_word.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 117,
      "complexity": 1.1099999999999999,
      "priority_score": 0
    },
    {
      "file": "toggle_error_squiggles.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 6,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "unified_phonemes.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 567,
      "complexity": 3.25,
      "priority_score": 0
    },
    {
      "file": "utf8_encoding_fixer.py",
      "category": "tools",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 347,
      "complexity": 3.6799999999999997,
      "priority_score": 0
    },
    {
      "file": "utf8_terminal_cleaner.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 161,
      "complexity": 0.22000000000000003,
      "priority_score": 0
    },
    {
      "file": "verify_error_suppression.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 6,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "verify_string_fixes.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 59,
      "complexity": 0.7,
      "priority_score": 0
    },
    {
      "file": "violation_elimination_system.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 156,
      "complexity": 1.22,
      "priority_score": 0
    },
    {
      "file": "xampp_arabic_phonology.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 113,
      "complexity": 0.2,
      "priority_score": 0
    },
    {
      "file": "xampp_test_phonemes_matrix.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 257,
      "complexity": 2.65,
      "priority_score": 0
    },
    {
      "file": "__init__.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 33,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "core\\base_engine.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 210,
      "complexity": 2.0,
      "priority_score": 0
    },
    {
      "file": "core\\config.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 173,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "core\\__init__.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 28,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "nlp\\advanced_arabic_engine.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 24,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "nlp\\machine_learning_engine.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 24,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "nlp\\__init__.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 35,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "nlp\\derivation\\models\\pattern_embed.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 714,
      "complexity": 6.7,
      "priority_score": 0
    },
    {
      "file": "nlp\\derivation\\models\\__init__.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 31,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "nlp\\frozen_root\\engine.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 701,
      "complexity": 8.61,
      "priority_score": 0
    },
    {
      "file": "nlp\\frozen_root\\engine_new.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 624,
      "complexity": 8.36,
      "priority_score": 0
    },
    {
      "file": "nlp\\frozen_root\\__init__.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 149,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "nlp\\frozen_root\\models\\__init__.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 64,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "nlp\\full_pipeline\\engine.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 123,
      "complexity": 1.6,
      "priority_score": 0
    },
    {
      "file": "nlp\\full_pipeline\\__init__.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 41,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "nlp\\grammatical_particles\\engine.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 81,
      "complexity": 1.1099999999999999,
      "priority_score": 0
    },
    {
      "file": "nlp\\grammatical_particles\\__init__.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 34,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "nlp\\inflection\\engine.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 129,
      "complexity": 1.6,
      "priority_score": 0
    },
    {
      "file": "nlp\\inflection\\__init__.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 30,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "nlp\\inflection\\models\\__init__.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 29,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "nlp\\morphology\\engine.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 76,
      "complexity": 0.9,
      "priority_score": 0
    },
    {
      "file": "nlp\\morphology\\config\\settings.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 490,
      "complexity": 0.030000000000000006,
      "priority_score": 0
    },
    {
      "file": "nlp\\particles\\engine.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 80,
      "complexity": 1.1,
      "priority_score": 0
    },
    {
      "file": "nlp\\phonological\\engine_professional.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 24,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "nlp\\phonological\\__init__.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 41,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "nlp\\phonological\\models\\deletion.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 291,
      "complexity": 5.95,
      "priority_score": 0
    },
    {
      "file": "nlp\\phonological\\models\\rule_base.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 214,
      "complexity": 2.6100000000000003,
      "priority_score": 0
    },
    {
      "file": "nlp\\phonological\\models\\__init__.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 31,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "nlp\\phonology\\engine.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 76,
      "complexity": 0.9,
      "priority_score": 0
    },
    {
      "file": "nlp\\phonology\\config\\settings.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 442,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "nlp\\syllable\\engine.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 695,
      "complexity": 10,
      "priority_score": 0
    },
    {
      "file": "nlp\\syllable\\__init__.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 40,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "nlp\\syllable\\models\\segmenter.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 481,
      "complexity": 6.88,
      "priority_score": 0
    },
    {
      "file": "nlp\\syllable\\models\\__init__.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 26,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "nlp\\weight\\engine.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 76,
      "complexity": 0.9,
      "priority_score": 0
    },
    {
      "file": "tests\\conftest.py",
      "category": "experimental",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 109,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_arabic_system.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 111,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_hello_world.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 8,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_phoneme_processing.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 121,
      "complexity": 1.61,
      "priority_score": 0
    },
    {
      "file": "tests\\test_syllable_processing.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 207,
      "complexity": 3.9799999999999995,
      "priority_score": 0
    },
    {
      "file": "tests\\__init__.py",
      "category": "dead_code",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 4,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_core\\test_base_engine.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 12,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_core\\test_config.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 18,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_core\\__init__.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 9,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_nlp\\__init__.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 9,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_nlp\\test_derivation\\test_engine.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 8,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_nlp\\test_derivation\\__init__.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 8,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_nlp\\test_frozen_root\\test_engine.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 8,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_nlp\\test_frozen_root\\__init__.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 8,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_nlp\\test_inflection\\test_engine.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 8,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_nlp\\test_inflection\\__init__.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 8,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_nlp\\test_morphology\\test_engine.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 8,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_nlp\\test_morphology\\__init__.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 8,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_nlp\\test_phoneme\\test_engine.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 8,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_nlp\\test_phoneme\\__init__.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 8,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_nlp\\test_phonological\\test_engine.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 8,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_nlp\\test_phonological\\__init__.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 8,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_nlp\\test_syllable\\test_engine.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 8,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_nlp\\test_syllable\\__init__.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 8,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_nlp\\test_weight\\test_engine.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 8,
      "complexity": 0.0,
      "priority_score": 0
    },
    {
      "file": "tests\\test_nlp\\test_weight\\__init__.py",
      "category": "test_files",
      "severity_score": 0,
      "fixability_score": 10,
      "syntax_valid": true,
      "error_count": 0,
      "line_count": 8,
      "complexity": 0.0,
      "priority_score": 0
    }
  ]
}