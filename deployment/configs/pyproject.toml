[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "arabic-phonology-engine"
version = "2.0.0"
description = "Dynamic Arabic Phonological Analysis Engine with Real-time WebSocket Support"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/your-username/arabic-phonology-engine"
repository = "https://github.com/your-username/arabic-phonology-engine"
documentation = "https://your-username.github.io/arabic-phonology-engine"
keywords = ["arabic", "phonology", "nlp", "linguistics", "analysis", "real-time"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: Arabic",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]

[tool.poetry.dependencies]
python = "^3.9"
Flask = "^3.1.0"
Flask-SocketIO = "^5.3.0"
Flask-CORS = "^4.0.0"
eventlet = "^0.33.0"
praat-parselmouth = "^0.4.3"
arabic-reshaper = "^3.0.0"
phonemizer = "^3.2.0"
librosa = "^0.10.0"
numpy = "^1.24.0"
scipy = "^1.11.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-cov = "^4.0.0"
pytest-asyncio = "^0.23.0"
black = "^25.1.0"
isort = "^6.0.0"
flake8 = "^7.0.0"
mypy = "^1.17.0"
pre-commit = "^3.6.0"
mkdocs = "^1.5.0"
mkdocs-material = "^9.5.0"
mkdocs-rtd-dropdown = "^1.0.0"
pdoc = "^14.4.0"

[tool.poetry.group.test.dependencies]
coverage = "^7.4.0"
hypothesis = "^6.98.0"
faker = "^22.0.0"

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312", "py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["phonology", "arabic_morphology", "arabic_morphophon"]
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
include_trailing_comma = true

# Flake8 configuration for reduced violations
[tool.flake8]
max-line-length = 88
max-complexity = 15
extend-ignore = [
    "E203",
    "W503", 
    "E501",
    "F401",
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "B101",
    "B902",
]
exclude = [
    ".venv",
    ".env", 
    "dist",
    "build",
    "__pycache__",
    "*.egg-info",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    "migrations",
    "static",
    "media",
]
per-file-ignores = [
    "__init__.py:F401,F403",  # imported but unused, undefined from star import
    "test_*.py:E501,D",       # line too long and missing docstrings in tests
    "*/tests/*:E501,D",       # line too long and missing docstrings in tests
    "app*.py:E501",           # allow longer lines in main app files
    "settings.py:E501",       # allow longer lines in settings
    "config.py:E501",         # allow longer lines in config
]

[tool.mypy]
python_version = "3.9"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "flask_socketio.*",
    "arabic_morphophon.*",
    "phonology.*",
    "arabic_morphology.*",
    "eventlet.*",
    "librosa.*",
    "scipy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["arabic_morphophon"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.poetry.scripts]
arabic-phonology = "phonology.cli:main"
phonology-server = "app:main"
